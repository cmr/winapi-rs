/* automatically generated by rust-bindgen */

pub type ID3DXBuffer = Struct_ID3DXBuffer;
pub type LPD3DXBUFFER = *mut Struct_ID3DXBuffer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXBuffer {
    pub lpVtbl: *mut Struct_ID3DXBufferVtbl,
}
impl ::std::default::Default for Struct_ID3DXBuffer {
    fn default() -> Struct_ID3DXBuffer { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXBufferVtbl = Struct_ID3DXBufferVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXBufferVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXBuffer,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXBuffer)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn(This: *mut ID3DXBuffer)
                                           -> ULONG>,
    pub GetBufferPointer: ::std::option::Option<extern "C" fn
                                                    (This: *mut ID3DXBuffer)
                                                    -> LPVOID>,
    pub GetBufferSize: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXBuffer)
                                                 -> DWORD>,
}
impl ::std::default::Default for Struct_ID3DXBufferVtbl {
    fn default() -> Struct_ID3DXBufferVtbl { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXSprite = Struct_ID3DXSprite;
pub type LPD3DXSPRITE = *mut Struct_ID3DXSprite;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXSprite {
    pub lpVtbl: *mut Struct_ID3DXSpriteVtbl,
}
impl ::std::default::Default for Struct_ID3DXSprite {
    fn default() -> Struct_ID3DXSprite { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXSpriteVtbl = Struct_ID3DXSpriteVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXSpriteVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXSprite,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXSprite)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn(This: *mut ID3DXSprite)
                                           -> ULONG>,
    pub GetDevice: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXSprite,
                                              ppDevice:
                                                  *mut LPDIRECT3DDEVICE9)
                                             -> HRESULT>,
    pub GetTransform: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXSprite,
                                                 pTransform: *mut D3DXMATRIX)
                                                -> HRESULT>,
    pub SetTransform: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXSprite,
                                                 pTransform:
                                                     *const D3DXMATRIX)
                                                -> HRESULT>,
    pub SetWorldViewRH: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXSprite,
                                                   pWorld: *const D3DXMATRIX,
                                                   pView: *const D3DXMATRIX)
                                                  -> HRESULT>,
    pub SetWorldViewLH: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXSprite,
                                                   pWorld: *const D3DXMATRIX,
                                                   pView: *const D3DXMATRIX)
                                                  -> HRESULT>,
    pub Begin: ::std::option::Option<extern "C" fn
                                         (This: *mut ID3DXSprite,
                                          Flags: DWORD) -> HRESULT>,
    pub Draw: ::std::option::Option<extern "C" fn
                                        (This: *mut ID3DXSprite,
                                         pTexture: LPDIRECT3DTEXTURE9,
                                         pSrcRect: *const RECT,
                                         pCenter: *const D3DXVECTOR3,
                                         pPosition: *const D3DXVECTOR3,
                                         Color: D3DCOLOR) -> HRESULT>,
    pub Flush: ::std::option::Option<extern "C" fn(This: *mut ID3DXSprite)
                                         -> HRESULT>,
    pub End: ::std::option::Option<extern "C" fn(This: *mut ID3DXSprite)
                                       -> HRESULT>,
    pub OnLostDevice: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXSprite)
                                                -> HRESULT>,
    pub OnResetDevice: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXSprite)
                                                 -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXSpriteVtbl {
    fn default() -> Struct_ID3DXSpriteVtbl { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXFONT_DESCA {
    pub Height: INT,
    pub Width: UINT,
    pub Weight: UINT,
    pub MipLevels: UINT,
    pub Italic: BOOL,
    pub CharSet: BYTE,
    pub OutputPrecision: BYTE,
    pub Quality: BYTE,
    pub PitchAndFamily: BYTE,
    pub FaceName: [CHAR; 32usize],
}
impl ::std::default::Default for Struct__D3DXFONT_DESCA {
    fn default() -> Struct__D3DXFONT_DESCA { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXFONT_DESCA = Struct__D3DXFONT_DESCA;
pub type LPD3DXFONT_DESCA = *mut Struct__D3DXFONT_DESCA;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXFONT_DESCW {
    pub Height: INT,
    pub Width: UINT,
    pub Weight: UINT,
    pub MipLevels: UINT,
    pub Italic: BOOL,
    pub CharSet: BYTE,
    pub OutputPrecision: BYTE,
    pub Quality: BYTE,
    pub PitchAndFamily: BYTE,
    pub FaceName: [WCHAR; 32usize],
}
impl ::std::default::Default for Struct__D3DXFONT_DESCW {
    fn default() -> Struct__D3DXFONT_DESCW { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXFONT_DESCW = Struct__D3DXFONT_DESCW;
pub type LPD3DXFONT_DESCW = *mut Struct__D3DXFONT_DESCW;
pub type D3DXFONT_DESC = D3DXFONT_DESCA;
pub type LPD3DXFONT_DESC = LPD3DXFONT_DESCA;
pub type ID3DXFont = Struct_ID3DXFont;
pub type LPD3DXFONT = *mut Struct_ID3DXFont;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXFont {
    pub lpVtbl: *mut Struct_ID3DXFontVtbl,
}
impl ::std::default::Default for Struct_ID3DXFont {
    fn default() -> Struct_ID3DXFont { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXFontVtbl = Struct_ID3DXFontVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXFontVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXFont,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXFont)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn(This: *mut ID3DXFont)
                                           -> ULONG>,
    pub GetDevice: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXFont,
                                              ppDevice:
                                                  *mut LPDIRECT3DDEVICE9)
                                             -> HRESULT>,
    pub GetDescA: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXFont,
                                             pDesc: *mut D3DXFONT_DESCA)
                                            -> HRESULT>,
    pub GetDescW: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXFont,
                                             pDesc: *mut D3DXFONT_DESCW)
                                            -> HRESULT>,
    pub GetTextMetricsA: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXFont,
                                                    pTextMetrics:
                                                        *mut TEXTMETRICA)
                                                   -> BOOL>,
    pub GetTextMetricsW: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXFont,
                                                    pTextMetrics:
                                                        *mut TEXTMETRICW)
                                                   -> BOOL>,
    pub GetDC: ::std::option::Option<extern "C" fn(This: *mut ID3DXFont)
                                         -> HDC>,
    pub GetGlyphData: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXFont,
                                                 Glyph: UINT,
                                                 ppTexture:
                                                     *mut LPDIRECT3DTEXTURE9,
                                                 pBlackBox: *mut RECT,
                                                 pCellInc: *mut POINT)
                                                -> HRESULT>,
    pub PreloadCharacters: ::std::option::Option<extern "C" fn
                                                     (This: *mut ID3DXFont,
                                                      First: UINT, Last: UINT)
                                                     -> HRESULT>,
    pub PreloadGlyphs: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXFont,
                                                  First: UINT, Last: UINT)
                                                 -> HRESULT>,
    pub PreloadTextA: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXFont,
                                                 pString: LPCSTR, Count: INT)
                                                -> HRESULT>,
    pub PreloadTextW: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXFont,
                                                 pString: LPCWSTR, Count: INT)
                                                -> HRESULT>,
    pub DrawTextA: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXFont,
                                              pSprite: LPD3DXSPRITE,
                                              pString: LPCSTR, Count: INT,
                                              pRect: LPRECT, Format: DWORD,
                                              Color: D3DCOLOR) -> INT>,
    pub DrawTextW: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXFont,
                                              pSprite: LPD3DXSPRITE,
                                              pString: LPCWSTR, Count: INT,
                                              pRect: LPRECT, Format: DWORD,
                                              Color: D3DCOLOR) -> INT>,
    pub OnLostDevice: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXFont)
                                                -> HRESULT>,
    pub OnResetDevice: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXFont)
                                                 -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXFontVtbl {
    fn default() -> Struct_ID3DXFontVtbl { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXRTS_DESC {
    pub Width: UINT,
    pub Height: UINT,
    pub Format: D3DFORMAT,
    pub DepthStencil: BOOL,
    pub DepthStencilFormat: D3DFORMAT,
}
impl ::std::default::Default for Struct__D3DXRTS_DESC {
    fn default() -> Struct__D3DXRTS_DESC { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXRTS_DESC = Struct__D3DXRTS_DESC;
pub type LPD3DXRTS_DESC = *mut Struct__D3DXRTS_DESC;
pub type ID3DXRenderToSurface = Struct_ID3DXRenderToSurface;
pub type LPD3DXRENDERTOSURFACE = *mut Struct_ID3DXRenderToSurface;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXRenderToSurface {
    pub lpVtbl: *mut Struct_ID3DXRenderToSurfaceVtbl,
}
impl ::std::default::Default for Struct_ID3DXRenderToSurface {
    fn default() -> Struct_ID3DXRenderToSurface {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ID3DXRenderToSurfaceVtbl = Struct_ID3DXRenderToSurfaceVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXRenderToSurfaceVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXRenderToSurface,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn
                                          (This: *mut ID3DXRenderToSurface)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXRenderToSurface)
                                           -> ULONG>,
    pub GetDevice: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXRenderToSurface,
                                              ppDevice:
                                                  *mut LPDIRECT3DDEVICE9)
                                             -> HRESULT>,
    pub GetDesc: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXRenderToSurface,
                                            pDesc: *mut D3DXRTS_DESC)
                                           -> HRESULT>,
    pub BeginScene: ::std::option::Option<extern "C" fn
                                              (This:
                                                   *mut ID3DXRenderToSurface,
                                               pSurface: LPDIRECT3DSURFACE9,
                                               pViewport: *const D3DVIEWPORT9)
                                              -> HRESULT>,
    pub EndScene: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXRenderToSurface,
                                             MipFilter: DWORD) -> HRESULT>,
    pub OnLostDevice: ::std::option::Option<extern "C" fn
                                                (This:
                                                     *mut ID3DXRenderToSurface)
                                                -> HRESULT>,
    pub OnResetDevice: ::std::option::Option<extern "C" fn
                                                 (This:
                                                      *mut ID3DXRenderToSurface)
                                                 -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXRenderToSurfaceVtbl {
    fn default() -> Struct_ID3DXRenderToSurfaceVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXRTE_DESC {
    pub Size: UINT,
    pub MipLevels: UINT,
    pub Format: D3DFORMAT,
    pub DepthStencil: BOOL,
    pub DepthStencilFormat: D3DFORMAT,
}
impl ::std::default::Default for Struct__D3DXRTE_DESC {
    fn default() -> Struct__D3DXRTE_DESC { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXRTE_DESC = Struct__D3DXRTE_DESC;
pub type LPD3DXRTE_DESC = *mut Struct__D3DXRTE_DESC;
pub type ID3DXRenderToEnvMap = Struct_ID3DXRenderToEnvMap;
pub type LPD3DXRenderToEnvMap = *mut Struct_ID3DXRenderToEnvMap;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXRenderToEnvMap {
    pub lpVtbl: *mut Struct_ID3DXRenderToEnvMapVtbl,
}
impl ::std::default::Default for Struct_ID3DXRenderToEnvMap {
    fn default() -> Struct_ID3DXRenderToEnvMap {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ID3DXRenderToEnvMapVtbl = Struct_ID3DXRenderToEnvMapVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXRenderToEnvMapVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXRenderToEnvMap,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn
                                          (This: *mut ID3DXRenderToEnvMap)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXRenderToEnvMap)
                                           -> ULONG>,
    pub GetDevice: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXRenderToEnvMap,
                                              ppDevice:
                                                  *mut LPDIRECT3DDEVICE9)
                                             -> HRESULT>,
    pub GetDesc: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXRenderToEnvMap,
                                            pDesc: *mut D3DXRTE_DESC)
                                           -> HRESULT>,
    pub BeginCube: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXRenderToEnvMap,
                                              pCubeTex:
                                                  LPDIRECT3DCUBETEXTURE9)
                                             -> HRESULT>,
    pub BeginSphere: ::std::option::Option<extern "C" fn
                                               (This:
                                                    *mut ID3DXRenderToEnvMap,
                                                pTex: LPDIRECT3DTEXTURE9)
                                               -> HRESULT>,
    pub BeginHemisphere: ::std::option::Option<extern "C" fn
                                                   (This:
                                                        *mut ID3DXRenderToEnvMap,
                                                    pTexZPos:
                                                        LPDIRECT3DTEXTURE9,
                                                    pTexZNeg:
                                                        LPDIRECT3DTEXTURE9)
                                                   -> HRESULT>,
    pub BeginParabolic: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXRenderToEnvMap,
                                                   pTexZPos:
                                                       LPDIRECT3DTEXTURE9,
                                                   pTexZNeg:
                                                       LPDIRECT3DTEXTURE9)
                                                  -> HRESULT>,
    pub Face: ::std::option::Option<extern "C" fn
                                        (This: *mut ID3DXRenderToEnvMap,
                                         Face: D3DCUBEMAP_FACES,
                                         MipFilter: DWORD) -> HRESULT>,
    pub End: ::std::option::Option<extern "C" fn
                                       (This: *mut ID3DXRenderToEnvMap,
                                        MipFilter: DWORD) -> HRESULT>,
    pub OnLostDevice: ::std::option::Option<extern "C" fn
                                                (This:
                                                     *mut ID3DXRenderToEnvMap)
                                                -> HRESULT>,
    pub OnResetDevice: ::std::option::Option<extern "C" fn
                                                 (This:
                                                      *mut ID3DXRenderToEnvMap)
                                                 -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXRenderToEnvMapVtbl {
    fn default() -> Struct_ID3DXRenderToEnvMapVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ID3DXLine = Struct_ID3DXLine;
pub type LPD3DXLINE = *mut Struct_ID3DXLine;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXLine {
    pub lpVtbl: *mut Struct_ID3DXLineVtbl,
}
impl ::std::default::Default for Struct_ID3DXLine {
    fn default() -> Struct_ID3DXLine { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXLineVtbl = Struct_ID3DXLineVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXLineVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXLine,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXLine)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn(This: *mut ID3DXLine)
                                           -> ULONG>,
    pub GetDevice: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXLine,
                                              ppDevice:
                                                  *mut LPDIRECT3DDEVICE9)
                                             -> HRESULT>,
    pub Begin: ::std::option::Option<extern "C" fn(This: *mut ID3DXLine)
                                         -> HRESULT>,
    pub Draw: ::std::option::Option<extern "C" fn
                                        (This: *mut ID3DXLine,
                                         pVertexList: *const D3DXVECTOR2,
                                         dwVertexListCount: DWORD,
                                         Color: D3DCOLOR) -> HRESULT>,
    pub DrawTransform: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXLine,
                                                  pVertexList:
                                                      *const D3DXVECTOR3,
                                                  dwVertexListCount: DWORD,
                                                  pTransform:
                                                      *const D3DXMATRIX,
                                                  Color: D3DCOLOR)
                                                 -> HRESULT>,
    pub SetPattern: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXLine,
                                               dwPattern: DWORD) -> HRESULT>,
    pub GetPattern: ::std::option::Option<extern "C" fn(This: *mut ID3DXLine)
                                              -> DWORD>,
    pub SetPatternScale: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXLine,
                                                    fPatternScale: FLOAT)
                                                   -> HRESULT>,
    pub GetPatternScale: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXLine)
                                                   -> FLOAT>,
    pub SetWidth: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXLine,
                                             fWidth: FLOAT) -> HRESULT>,
    pub GetWidth: ::std::option::Option<extern "C" fn(This: *mut ID3DXLine)
                                            -> FLOAT>,
    pub SetAntialias: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXLine,
                                                 bAntialias: BOOL)
                                                -> HRESULT>,
    pub GetAntialias: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXLine)
                                                -> BOOL>,
    pub SetGLLines: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXLine,
                                               bGLLines: BOOL) -> HRESULT>,
    pub GetGLLines: ::std::option::Option<extern "C" fn(This: *mut ID3DXLine)
                                              -> BOOL>,
    pub End: ::std::option::Option<extern "C" fn(This: *mut ID3DXLine)
                                       -> HRESULT>,
    pub OnLostDevice: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXLine)
                                                -> HRESULT>,
    pub OnResetDevice: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXLine)
                                                 -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXLineVtbl {
    fn default() -> Struct_ID3DXLineVtbl { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static IID_ID3DXBuffer: GUID;
    pub static IID_ID3DXSprite: GUID;
    pub static IID_ID3DXFont: GUID;
    pub static IID_ID3DXRenderToSurface: GUID;
    pub static IID_ID3DXRenderToEnvMap: GUID;
    pub static IID_ID3DXLine: GUID;
}
extern "C" {
    pub fn D3DXCheckVersion(D3DSdkVersion: UINT, D3DXSdkVersion: UINT)
     -> BOOL;
    pub fn D3DXDebugMute(Mute: BOOL) -> BOOL;
    pub fn D3DXGetDriverLevel(pDevice: LPDIRECT3DDEVICE9) -> UINT;
    pub fn D3DXCreateSprite(pDevice: LPDIRECT3DDEVICE9,
                            ppSprite: *mut LPD3DXSPRITE) -> HRESULT;
    pub fn D3DXCreateFontA(pDevice: LPDIRECT3DDEVICE9, Height: INT,
                           Width: UINT, Weight: UINT, MipLevels: UINT,
                           Italic: BOOL, CharSet: DWORD,
                           OutputPrecision: DWORD, Quality: DWORD,
                           PitchAndFamily: DWORD, pFaceName: LPCSTR,
                           ppFont: *mut LPD3DXFONT) -> HRESULT;
    pub fn D3DXCreateFontW(pDevice: LPDIRECT3DDEVICE9, Height: INT,
                           Width: UINT, Weight: UINT, MipLevels: UINT,
                           Italic: BOOL, CharSet: DWORD,
                           OutputPrecision: DWORD, Quality: DWORD,
                           PitchAndFamily: DWORD, pFaceName: LPCWSTR,
                           ppFont: *mut LPD3DXFONT) -> HRESULT;
    pub fn D3DXCreateFontIndirectA(pDevice: LPDIRECT3DDEVICE9,
                                   pDesc: *const D3DXFONT_DESCA,
                                   ppFont: *mut LPD3DXFONT) -> HRESULT;
    pub fn D3DXCreateFontIndirectW(pDevice: LPDIRECT3DDEVICE9,
                                   pDesc: *const D3DXFONT_DESCW,
                                   ppFont: *mut LPD3DXFONT) -> HRESULT;
    pub fn D3DXCreateRenderToSurface(pDevice: LPDIRECT3DDEVICE9, Width: UINT,
                                     Height: UINT, Format: D3DFORMAT,
                                     DepthStencil: BOOL,
                                     DepthStencilFormat: D3DFORMAT,
                                     ppRenderToSurface:
                                         *mut LPD3DXRENDERTOSURFACE)
     -> HRESULT;
    pub fn D3DXCreateRenderToEnvMap(pDevice: LPDIRECT3DDEVICE9, Size: UINT,
                                    MipLevels: UINT, Format: D3DFORMAT,
                                    DepthStencil: BOOL,
                                    DepthStencilFormat: D3DFORMAT,
                                    ppRenderToEnvMap:
                                        *mut LPD3DXRenderToEnvMap) -> HRESULT;
    pub fn D3DXCreateLine(pDevice: LPDIRECT3DDEVICE9, ppLine: *mut LPD3DXLINE)
     -> HRESULT;
}
