/* automatically generated by rust-bindgen */

pub type Enum__D3DXPATCHMESHTYPE = ::libc::c_uint;
pub const D3DXPATCHMESH_RECT: ::libc::c_uint = 1;
pub const D3DXPATCHMESH_TRI: ::libc::c_uint = 2;
pub const D3DXPATCHMESH_NPATCH: ::libc::c_uint = 3;
pub const D3DXPATCHMESH_FORCE_DWORD: ::libc::c_uint = 2147483647;
pub type D3DXPATCHMESHTYPE = Enum__D3DXPATCHMESHTYPE;
pub type Enum__D3DXMESH = ::libc::c_uint;
pub const D3DXMESH_32BIT: ::libc::c_uint = 1;
pub const D3DXMESH_DONOTCLIP: ::libc::c_uint = 2;
pub const D3DXMESH_POINTS: ::libc::c_uint = 4;
pub const D3DXMESH_RTPATCHES: ::libc::c_uint = 8;
pub const D3DXMESH_NPATCHES: ::libc::c_uint = 16384;
pub const D3DXMESH_VB_SYSTEMMEM: ::libc::c_uint = 16;
pub const D3DXMESH_VB_MANAGED: ::libc::c_uint = 32;
pub const D3DXMESH_VB_WRITEONLY: ::libc::c_uint = 64;
pub const D3DXMESH_VB_DYNAMIC: ::libc::c_uint = 128;
pub const D3DXMESH_VB_SOFTWAREPROCESSING: ::libc::c_uint = 32768;
pub const D3DXMESH_IB_SYSTEMMEM: ::libc::c_uint = 256;
pub const D3DXMESH_IB_MANAGED: ::libc::c_uint = 512;
pub const D3DXMESH_IB_WRITEONLY: ::libc::c_uint = 1024;
pub const D3DXMESH_IB_DYNAMIC: ::libc::c_uint = 2048;
pub const D3DXMESH_IB_SOFTWAREPROCESSING: ::libc::c_uint = 65536;
pub const D3DXMESH_VB_SHARE: ::libc::c_uint = 4096;
pub const D3DXMESH_USEHWONLY: ::libc::c_uint = 8192;
pub const D3DXMESH_SYSTEMMEM: ::libc::c_uint = 272;
pub const D3DXMESH_MANAGED: ::libc::c_uint = 544;
pub const D3DXMESH_WRITEONLY: ::libc::c_uint = 1088;
pub const D3DXMESH_DYNAMIC: ::libc::c_uint = 2176;
pub const D3DXMESH_SOFTWAREPROCESSING: ::libc::c_uint = 98304;
pub type Enum__D3DXPATCHMESH = ::libc::c_uint;
pub const D3DXPATCHMESH_DEFAULT: ::libc::c_uint = 0;
pub type Enum__D3DXMESHSIMP = ::libc::c_uint;
pub const D3DXMESHSIMP_VERTEX: ::libc::c_uint = 1;
pub const D3DXMESHSIMP_FACE: ::libc::c_uint = 2;
pub type Enum__D3DXCLEANTYPE = ::libc::c_uint;
pub const D3DXCLEAN_BACKFACING: ::libc::c_uint = 1;
pub const D3DXCLEAN_BOWTIES: ::libc::c_uint = 2;
pub const D3DXCLEAN_SKINNING: ::libc::c_uint = 1;
pub const D3DXCLEAN_OPTIMIZATION: ::libc::c_uint = 1;
pub const D3DXCLEAN_SIMPLIFICATION: ::libc::c_uint = 3;
pub type D3DXCLEANTYPE = Enum__D3DXCLEANTYPE;
pub type Enum__MAX_FVF_DECL_SIZE = ::libc::c_uint;
pub const MAX_FVF_DECL_SIZE: ::libc::c_uint = 65;
pub type Enum__D3DXTANGENT = ::libc::c_uint;
pub const D3DXTANGENT_WRAP_U: ::libc::c_uint = 1;
pub const D3DXTANGENT_WRAP_V: ::libc::c_uint = 2;
pub const D3DXTANGENT_WRAP_UV: ::libc::c_uint = 3;
pub const D3DXTANGENT_DONT_NORMALIZE_PARTIALS: ::libc::c_uint = 4;
pub const D3DXTANGENT_DONT_ORTHOGONALIZE: ::libc::c_uint = 8;
pub const D3DXTANGENT_ORTHOGONALIZE_FROM_V: ::libc::c_uint = 16;
pub const D3DXTANGENT_ORTHOGONALIZE_FROM_U: ::libc::c_uint = 32;
pub const D3DXTANGENT_WEIGHT_BY_AREA: ::libc::c_uint = 64;
pub const D3DXTANGENT_WEIGHT_EQUAL: ::libc::c_uint = 128;
pub const D3DXTANGENT_WIND_CW: ::libc::c_uint = 256;
pub const D3DXTANGENT_CALCULATE_NORMALS: ::libc::c_uint = 512;
pub const D3DXTANGENT_GENERATE_IN_PLACE: ::libc::c_uint = 1024;
pub type D3DXTANGENT = Enum__D3DXTANGENT;
pub type Enum__D3DXIMT = ::libc::c_uint;
pub const D3DXIMT_WRAP_U: ::libc::c_uint = 1;
pub const D3DXIMT_WRAP_V: ::libc::c_uint = 2;
pub const D3DXIMT_WRAP_UV: ::libc::c_uint = 3;
pub type D3DXIMT = Enum__D3DXIMT;
pub type Enum__D3DXUVATLAS = ::libc::c_uint;
pub const D3DXUVATLAS_DEFAULT: ::libc::c_uint = 0;
pub const D3DXUVATLAS_GEODESIC_FAST: ::libc::c_uint = 1;
pub const D3DXUVATLAS_GEODESIC_QUALITY: ::libc::c_uint = 2;
pub type D3DXUVATLAS = Enum__D3DXUVATLAS;
pub type LPD3DXBASEMESH = *mut Struct_ID3DXBaseMesh;
pub type LPD3DXMESH = *mut Struct_ID3DXMesh;
pub type LPD3DXPMESH = *mut Struct_ID3DXPMesh;
pub type LPD3DXSPMESH = *mut Struct_ID3DXSPMesh;
pub type LPD3DXSKININFO = *mut Struct_ID3DXSkinInfo;
pub type LPD3DXPATCHMESH = *mut Struct_ID3DXPatchMesh;
pub type LPD3DXTEXTUREGUTTERHELPER = *mut Struct_ID3DXTextureGutterHelper;
pub type LPD3DXPRTBUFFER = *mut Struct_ID3DXPRTBuffer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXATTRIBUTERANGE {
    pub AttribId: DWORD,
    pub FaceStart: DWORD,
    pub FaceCount: DWORD,
    pub VertexStart: DWORD,
    pub VertexCount: DWORD,
}
impl ::std::default::Default for Struct__D3DXATTRIBUTERANGE {
    fn default() -> Struct__D3DXATTRIBUTERANGE {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXATTRIBUTERANGE = Struct__D3DXATTRIBUTERANGE;
pub type LPD3DXATTRIBUTERANGE = *mut D3DXATTRIBUTERANGE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXMATERIAL {
    pub MatD3D: D3DMATERIAL9,
    pub pTextureFilename: LPSTR,
}
impl ::std::default::Default for Struct__D3DXMATERIAL {
    fn default() -> Struct__D3DXMATERIAL { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXMATERIAL = Struct__D3DXMATERIAL;
pub type LPD3DXMATERIAL = *mut D3DXMATERIAL;
pub type Enum__D3DXEFFECTDEFAULTTYPE = ::libc::c_uint;
pub const D3DXEDT_STRING: ::libc::c_uint = 1;
pub const D3DXEDT_FLOATS: ::libc::c_uint = 2;
pub const D3DXEDT_DWORD: ::libc::c_uint = 3;
pub const D3DXEDT_FORCEDWORD: ::libc::c_uint = 2147483647;
pub type D3DXEFFECTDEFAULTTYPE = Enum__D3DXEFFECTDEFAULTTYPE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXEFFECTDEFAULT {
    pub pParamName: LPSTR,
    pub Type: D3DXEFFECTDEFAULTTYPE,
    pub NumBytes: DWORD,
    pub pValue: LPVOID,
}
impl ::std::default::Default for Struct__D3DXEFFECTDEFAULT {
    fn default() -> Struct__D3DXEFFECTDEFAULT {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXEFFECTDEFAULT = Struct__D3DXEFFECTDEFAULT;
pub type LPD3DXEFFECTDEFAULT = *mut Struct__D3DXEFFECTDEFAULT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXEFFECTINSTANCE {
    pub pEffectFilename: LPSTR,
    pub NumDefaults: DWORD,
    pub pDefaults: LPD3DXEFFECTDEFAULT,
}
impl ::std::default::Default for Struct__D3DXEFFECTINSTANCE {
    fn default() -> Struct__D3DXEFFECTINSTANCE {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXEFFECTINSTANCE = Struct__D3DXEFFECTINSTANCE;
pub type LPD3DXEFFECTINSTANCE = *mut Struct__D3DXEFFECTINSTANCE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXATTRIBUTEWEIGHTS {
    pub Position: FLOAT,
    pub Boundary: FLOAT,
    pub Normal: FLOAT,
    pub Diffuse: FLOAT,
    pub Specular: FLOAT,
    pub Texcoord: [FLOAT; 8usize],
    pub Tangent: FLOAT,
    pub Binormal: FLOAT,
}
impl ::std::default::Default for Struct__D3DXATTRIBUTEWEIGHTS {
    fn default() -> Struct__D3DXATTRIBUTEWEIGHTS {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXATTRIBUTEWEIGHTS = Struct__D3DXATTRIBUTEWEIGHTS;
pub type LPD3DXATTRIBUTEWEIGHTS = *mut Struct__D3DXATTRIBUTEWEIGHTS;
pub type Enum__D3DXWELDEPSILONSFLAGS = ::libc::c_uint;
pub const D3DXWELDEPSILONS_WELDALL: ::libc::c_uint = 1;
pub const D3DXWELDEPSILONS_WELDPARTIALMATCHES: ::libc::c_uint = 2;
pub const D3DXWELDEPSILONS_DONOTREMOVEVERTICES: ::libc::c_uint = 4;
pub const D3DXWELDEPSILONS_DONOTSPLIT: ::libc::c_uint = 8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXWELDEPSILONS {
    pub Position: FLOAT,
    pub BlendWeights: FLOAT,
    pub Normal: FLOAT,
    pub PSize: FLOAT,
    pub Specular: FLOAT,
    pub Diffuse: FLOAT,
    pub Texcoord: [FLOAT; 8usize],
    pub Tangent: FLOAT,
    pub Binormal: FLOAT,
    pub TessFactor: FLOAT,
}
impl ::std::default::Default for Struct__D3DXWELDEPSILONS {
    fn default() -> Struct__D3DXWELDEPSILONS {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXWELDEPSILONS = Struct__D3DXWELDEPSILONS;
pub type LPD3DXWELDEPSILONS = *mut D3DXWELDEPSILONS;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXBaseMesh {
    pub lpVtbl: *mut Struct_ID3DXBaseMeshVtbl,
}
impl ::std::default::Default for Struct_ID3DXBaseMesh {
    fn default() -> Struct_ID3DXBaseMesh { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXBaseMesh = Struct_ID3DXBaseMesh;
pub type ID3DXBaseMeshVtbl = Struct_ID3DXBaseMeshVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXBaseMeshVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXBaseMesh,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXBaseMesh)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn(This: *mut ID3DXBaseMesh)
                                           -> ULONG>,
    pub DrawSubset: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXBaseMesh,
                                               AttribId: DWORD) -> HRESULT>,
    pub GetNumFaces: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXBaseMesh)
                                               -> DWORD>,
    pub GetNumVertices: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXBaseMesh)
                                                  -> DWORD>,
    pub GetFVF: ::std::option::Option<extern "C" fn(This: *mut ID3DXBaseMesh)
                                          -> DWORD>,
    pub GetDeclaration: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXBaseMesh,
                                                   Declaration:
                                                       *mut D3DVERTEXELEMENT9)
                                                  -> HRESULT>,
    pub GetNumBytesPerVertex: ::std::option::Option<extern "C" fn
                                                        (This:
                                                             *mut ID3DXBaseMesh)
                                                        -> DWORD>,
    pub GetOptions: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXBaseMesh)
                                              -> DWORD>,
    pub GetDevice: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXBaseMesh,
                                              ppDevice:
                                                  *mut LPDIRECT3DDEVICE9)
                                             -> HRESULT>,
    pub CloneMeshFVF: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXBaseMesh,
                                                 Options: DWORD, FVF: DWORD,
                                                 pD3DDevice:
                                                     LPDIRECT3DDEVICE9,
                                                 ppCloneMesh: *mut LPD3DXMESH)
                                                -> HRESULT>,
    pub CloneMesh: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXBaseMesh,
                                              Options: DWORD,
                                              pDeclaration:
                                                  *const D3DVERTEXELEMENT9,
                                              pD3DDevice: LPDIRECT3DDEVICE9,
                                              ppCloneMesh: *mut LPD3DXMESH)
                                             -> HRESULT>,
    pub GetVertexBuffer: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXBaseMesh,
                                                    ppVB:
                                                        *mut LPDIRECT3DVERTEXBUFFER9)
                                                   -> HRESULT>,
    pub GetIndexBuffer: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXBaseMesh,
                                                   ppIB:
                                                       *mut LPDIRECT3DINDEXBUFFER9)
                                                  -> HRESULT>,
    pub LockVertexBuffer: ::std::option::Option<extern "C" fn
                                                    (This: *mut ID3DXBaseMesh,
                                                     Flags: DWORD,
                                                     ppData: *mut LPVOID)
                                                    -> HRESULT>,
    pub UnlockVertexBuffer: ::std::option::Option<extern "C" fn
                                                      (This:
                                                           *mut ID3DXBaseMesh)
                                                      -> HRESULT>,
    pub LockIndexBuffer: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXBaseMesh,
                                                    Flags: DWORD,
                                                    ppData: *mut LPVOID)
                                                   -> HRESULT>,
    pub UnlockIndexBuffer: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXBaseMesh)
                                                     -> HRESULT>,
    pub GetAttributeTable: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXBaseMesh,
                                                      pAttribTable:
                                                          *mut D3DXATTRIBUTERANGE,
                                                      pAttribTableSize:
                                                          *mut DWORD)
                                                     -> HRESULT>,
    pub ConvertPointRepsToAdjacency: ::std::option::Option<extern "C" fn
                                                               (This:
                                                                    *mut ID3DXBaseMesh,
                                                                pPRep:
                                                                    *const DWORD,
                                                                pAdjacency:
                                                                    *mut DWORD)
                                                               -> HRESULT>,
    pub ConvertAdjacencyToPointReps: ::std::option::Option<extern "C" fn
                                                               (This:
                                                                    *mut ID3DXBaseMesh,
                                                                pAdjacency:
                                                                    *const DWORD,
                                                                pPRep:
                                                                    *mut DWORD)
                                                               -> HRESULT>,
    pub GenerateAdjacency: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXBaseMesh,
                                                      Epsilon: FLOAT,
                                                      pAdjacency: *mut DWORD)
                                                     -> HRESULT>,
    pub UpdateSemantics: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXBaseMesh,
                                                    Declaration:
                                                        *mut D3DVERTEXELEMENT9)
                                                   -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXBaseMeshVtbl {
    fn default() -> Struct_ID3DXBaseMeshVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXMesh {
    pub lpVtbl: *mut Struct_ID3DXMeshVtbl,
}
impl ::std::default::Default for Struct_ID3DXMesh {
    fn default() -> Struct_ID3DXMesh { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXMesh = Struct_ID3DXMesh;
pub type ID3DXMeshVtbl = Struct_ID3DXMeshVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXMeshVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXMesh,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXMesh)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn(This: *mut ID3DXMesh)
                                           -> ULONG>,
    pub DrawSubset: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXMesh,
                                               AttribId: DWORD) -> HRESULT>,
    pub GetNumFaces: ::std::option::Option<extern "C" fn(This: *mut ID3DXMesh)
                                               -> DWORD>,
    pub GetNumVertices: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXMesh)
                                                  -> DWORD>,
    pub GetFVF: ::std::option::Option<extern "C" fn(This: *mut ID3DXMesh)
                                          -> DWORD>,
    pub GetDeclaration: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXMesh,
                                                   Declaration:
                                                       *mut D3DVERTEXELEMENT9)
                                                  -> HRESULT>,
    pub GetNumBytesPerVertex: ::std::option::Option<extern "C" fn
                                                        (This: *mut ID3DXMesh)
                                                        -> DWORD>,
    pub GetOptions: ::std::option::Option<extern "C" fn(This: *mut ID3DXMesh)
                                              -> DWORD>,
    pub GetDevice: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXMesh,
                                              ppDevice:
                                                  *mut LPDIRECT3DDEVICE9)
                                             -> HRESULT>,
    pub CloneMeshFVF: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXMesh,
                                                 Options: DWORD, FVF: DWORD,
                                                 pD3DDevice:
                                                     LPDIRECT3DDEVICE9,
                                                 ppCloneMesh: *mut LPD3DXMESH)
                                                -> HRESULT>,
    pub CloneMesh: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXMesh,
                                              Options: DWORD,
                                              pDeclaration:
                                                  *const D3DVERTEXELEMENT9,
                                              pD3DDevice: LPDIRECT3DDEVICE9,
                                              ppCloneMesh: *mut LPD3DXMESH)
                                             -> HRESULT>,
    pub GetVertexBuffer: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXMesh,
                                                    ppVB:
                                                        *mut LPDIRECT3DVERTEXBUFFER9)
                                                   -> HRESULT>,
    pub GetIndexBuffer: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXMesh,
                                                   ppIB:
                                                       *mut LPDIRECT3DINDEXBUFFER9)
                                                  -> HRESULT>,
    pub LockVertexBuffer: ::std::option::Option<extern "C" fn
                                                    (This: *mut ID3DXMesh,
                                                     Flags: DWORD,
                                                     ppData: *mut LPVOID)
                                                    -> HRESULT>,
    pub UnlockVertexBuffer: ::std::option::Option<extern "C" fn
                                                      (This: *mut ID3DXMesh)
                                                      -> HRESULT>,
    pub LockIndexBuffer: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXMesh,
                                                    Flags: DWORD,
                                                    ppData: *mut LPVOID)
                                                   -> HRESULT>,
    pub UnlockIndexBuffer: ::std::option::Option<extern "C" fn
                                                     (This: *mut ID3DXMesh)
                                                     -> HRESULT>,
    pub GetAttributeTable: ::std::option::Option<extern "C" fn
                                                     (This: *mut ID3DXMesh,
                                                      pAttribTable:
                                                          *mut D3DXATTRIBUTERANGE,
                                                      pAttribTableSize:
                                                          *mut DWORD)
                                                     -> HRESULT>,
    pub ConvertPointRepsToAdjacency: ::std::option::Option<extern "C" fn
                                                               (This:
                                                                    *mut ID3DXMesh,
                                                                pPRep:
                                                                    *const DWORD,
                                                                pAdjacency:
                                                                    *mut DWORD)
                                                               -> HRESULT>,
    pub ConvertAdjacencyToPointReps: ::std::option::Option<extern "C" fn
                                                               (This:
                                                                    *mut ID3DXMesh,
                                                                pAdjacency:
                                                                    *const DWORD,
                                                                pPRep:
                                                                    *mut DWORD)
                                                               -> HRESULT>,
    pub GenerateAdjacency: ::std::option::Option<extern "C" fn
                                                     (This: *mut ID3DXMesh,
                                                      Epsilon: FLOAT,
                                                      pAdjacency: *mut DWORD)
                                                     -> HRESULT>,
    pub UpdateSemantics: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXMesh,
                                                    Declaration:
                                                        *mut D3DVERTEXELEMENT9)
                                                   -> HRESULT>,
    pub LockAttributeBuffer: ::std::option::Option<extern "C" fn
                                                       (This: *mut ID3DXMesh,
                                                        Flags: DWORD,
                                                        ppData:
                                                            *mut *mut DWORD)
                                                       -> HRESULT>,
    pub UnlockAttributeBuffer: ::std::option::Option<extern "C" fn
                                                         (This:
                                                              *mut ID3DXMesh)
                                                         -> HRESULT>,
    pub Optimize: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXMesh,
                                             Flags: DWORD,
                                             pAdjacencyIn: *const DWORD,
                                             pAdjacencyOut: *mut DWORD,
                                             pFaceRemap: *mut DWORD,
                                             ppVertexRemap: *mut LPD3DXBUFFER,
                                             ppOptMesh: *mut LPD3DXMESH)
                                            -> HRESULT>,
    pub OptimizeInplace: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXMesh,
                                                    Flags: DWORD,
                                                    pAdjacencyIn:
                                                        *const DWORD,
                                                    pAdjacencyOut: *mut DWORD,
                                                    pFaceRemap: *mut DWORD,
                                                    ppVertexRemap:
                                                        *mut LPD3DXBUFFER)
                                                   -> HRESULT>,
    pub SetAttributeTable: ::std::option::Option<extern "C" fn
                                                     (This: *mut ID3DXMesh,
                                                      pAttribTable:
                                                          *const D3DXATTRIBUTERANGE,
                                                      cAttribTableSize: DWORD)
                                                     -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXMeshVtbl {
    fn default() -> Struct_ID3DXMeshVtbl { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXPMesh {
    pub lpVtbl: *mut Struct_ID3DXPMeshVtbl,
}
impl ::std::default::Default for Struct_ID3DXPMesh {
    fn default() -> Struct_ID3DXPMesh { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXPMesh = Struct_ID3DXPMesh;
pub type ID3DXPMeshVtbl = Struct_ID3DXPMeshVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXPMeshVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPMesh,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXPMesh)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn(This: *mut ID3DXPMesh)
                                           -> ULONG>,
    pub DrawSubset: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXPMesh,
                                               AttribId: DWORD) -> HRESULT>,
    pub GetNumFaces: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXPMesh)
                                               -> DWORD>,
    pub GetNumVertices: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPMesh)
                                                  -> DWORD>,
    pub GetFVF: ::std::option::Option<extern "C" fn(This: *mut ID3DXPMesh)
                                          -> DWORD>,
    pub GetDeclaration: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPMesh,
                                                   Declaration:
                                                       *mut D3DVERTEXELEMENT9)
                                                  -> HRESULT>,
    pub GetNumBytesPerVertex: ::std::option::Option<extern "C" fn
                                                        (This:
                                                             *mut ID3DXPMesh)
                                                        -> DWORD>,
    pub GetOptions: ::std::option::Option<extern "C" fn(This: *mut ID3DXPMesh)
                                              -> DWORD>,
    pub GetDevice: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPMesh,
                                              ppDevice:
                                                  *mut LPDIRECT3DDEVICE9)
                                             -> HRESULT>,
    pub CloneMeshFVF: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXPMesh,
                                                 Options: DWORD, FVF: DWORD,
                                                 pD3DDevice:
                                                     LPDIRECT3DDEVICE9,
                                                 ppCloneMesh: *mut LPD3DXMESH)
                                                -> HRESULT>,
    pub CloneMesh: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPMesh,
                                              Options: DWORD,
                                              pDeclaration:
                                                  *const D3DVERTEXELEMENT9,
                                              pD3DDevice: LPDIRECT3DDEVICE9,
                                              ppCloneMesh: *mut LPD3DXMESH)
                                             -> HRESULT>,
    pub GetVertexBuffer: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXPMesh,
                                                    ppVB:
                                                        *mut LPDIRECT3DVERTEXBUFFER9)
                                                   -> HRESULT>,
    pub GetIndexBuffer: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPMesh,
                                                   ppIB:
                                                       *mut LPDIRECT3DINDEXBUFFER9)
                                                  -> HRESULT>,
    pub LockVertexBuffer: ::std::option::Option<extern "C" fn
                                                    (This: *mut ID3DXPMesh,
                                                     Flags: DWORD,
                                                     ppData: *mut LPVOID)
                                                    -> HRESULT>,
    pub UnlockVertexBuffer: ::std::option::Option<extern "C" fn
                                                      (This: *mut ID3DXPMesh)
                                                      -> HRESULT>,
    pub LockIndexBuffer: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXPMesh,
                                                    Flags: DWORD,
                                                    ppData: *mut LPVOID)
                                                   -> HRESULT>,
    pub UnlockIndexBuffer: ::std::option::Option<extern "C" fn
                                                     (This: *mut ID3DXPMesh)
                                                     -> HRESULT>,
    pub GetAttributeTable: ::std::option::Option<extern "C" fn
                                                     (This: *mut ID3DXPMesh,
                                                      pAttribTable:
                                                          *mut D3DXATTRIBUTERANGE,
                                                      pAttribTableSize:
                                                          *mut DWORD)
                                                     -> HRESULT>,
    pub ConvertPointRepsToAdjacency: ::std::option::Option<extern "C" fn
                                                               (This:
                                                                    *mut ID3DXPMesh,
                                                                pPRep:
                                                                    *const DWORD,
                                                                pAdjacency:
                                                                    *mut DWORD)
                                                               -> HRESULT>,
    pub ConvertAdjacencyToPointReps: ::std::option::Option<extern "C" fn
                                                               (This:
                                                                    *mut ID3DXPMesh,
                                                                pAdjacency:
                                                                    *const DWORD,
                                                                pPRep:
                                                                    *mut DWORD)
                                                               -> HRESULT>,
    pub GenerateAdjacency: ::std::option::Option<extern "C" fn
                                                     (This: *mut ID3DXPMesh,
                                                      Epsilon: FLOAT,
                                                      pAdjacency: *mut DWORD)
                                                     -> HRESULT>,
    pub UpdateSemantics: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXPMesh,
                                                    Declaration:
                                                        *mut D3DVERTEXELEMENT9)
                                                   -> HRESULT>,
    pub ClonePMeshFVF: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXPMesh,
                                                  Options: DWORD, FVF: DWORD,
                                                  pD3DDevice:
                                                      LPDIRECT3DDEVICE9,
                                                  ppCloneMesh:
                                                      *mut LPD3DXPMESH)
                                                 -> HRESULT>,
    pub ClonePMesh: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXPMesh,
                                               Options: DWORD,
                                               pDeclaration:
                                                   *const D3DVERTEXELEMENT9,
                                               pD3DDevice: LPDIRECT3DDEVICE9,
                                               ppCloneMesh: *mut LPD3DXPMESH)
                                              -> HRESULT>,
    pub SetNumFaces: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXPMesh,
                                                Faces: DWORD) -> HRESULT>,
    pub SetNumVertices: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPMesh,
                                                   Vertices: DWORD)
                                                  -> HRESULT>,
    pub GetMaxFaces: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXPMesh)
                                               -> DWORD>,
    pub GetMinFaces: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXPMesh)
                                               -> DWORD>,
    pub GetMaxVertices: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPMesh)
                                                  -> DWORD>,
    pub GetMinVertices: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPMesh)
                                                  -> DWORD>,
    pub Save: ::std::option::Option<extern "C" fn
                                        (This: *mut ID3DXPMesh,
                                         pStream: *mut IStream,
                                         pMaterials: *const D3DXMATERIAL,
                                         pEffectInstances:
                                             *const D3DXEFFECTINSTANCE,
                                         NumMaterials: DWORD) -> HRESULT>,
    pub Optimize: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXPMesh,
                                             Flags: DWORD,
                                             pAdjacencyOut: *mut DWORD,
                                             pFaceRemap: *mut DWORD,
                                             ppVertexRemap: *mut LPD3DXBUFFER,
                                             ppOptMesh: *mut LPD3DXMESH)
                                            -> HRESULT>,
    pub OptimizeBaseLOD: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXPMesh,
                                                    Flags: DWORD,
                                                    pFaceRemap: *mut DWORD)
                                                   -> HRESULT>,
    pub TrimByFaces: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXPMesh,
                                                NewFacesMin: DWORD,
                                                NewFacesMax: DWORD,
                                                rgiFaceRemap: *mut DWORD,
                                                rgiVertRemap: *mut DWORD)
                                               -> HRESULT>,
    pub TrimByVertices: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPMesh,
                                                   NewVerticesMin: DWORD,
                                                   NewVerticesMax: DWORD,
                                                   rgiFaceRemap: *mut DWORD,
                                                   rgiVertRemap: *mut DWORD)
                                                  -> HRESULT>,
    pub GetAdjacency: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXPMesh,
                                                 pAdjacency: *mut DWORD)
                                                -> HRESULT>,
    pub GenerateVertexHistory: ::std::option::Option<extern "C" fn
                                                         (This:
                                                              *mut ID3DXPMesh,
                                                          pVertexHistory:
                                                              *mut DWORD)
                                                         -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXPMeshVtbl {
    fn default() -> Struct_ID3DXPMeshVtbl { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXSPMesh {
    pub lpVtbl: *mut Struct_ID3DXSPMeshVtbl,
}
impl ::std::default::Default for Struct_ID3DXSPMesh {
    fn default() -> Struct_ID3DXSPMesh { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXSPMesh = Struct_ID3DXSPMesh;
pub type ID3DXSPMeshVtbl = Struct_ID3DXSPMeshVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXSPMeshVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXSPMesh,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXSPMesh)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn(This: *mut ID3DXSPMesh)
                                           -> ULONG>,
    pub GetNumFaces: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXSPMesh)
                                               -> DWORD>,
    pub GetNumVertices: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXSPMesh)
                                                  -> DWORD>,
    pub GetFVF: ::std::option::Option<extern "C" fn(This: *mut ID3DXSPMesh)
                                          -> DWORD>,
    pub GetDeclaration: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXSPMesh,
                                                   Declaration:
                                                       *mut D3DVERTEXELEMENT9)
                                                  -> HRESULT>,
    pub GetOptions: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXSPMesh)
                                              -> DWORD>,
    pub GetDevice: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXSPMesh,
                                              ppDevice:
                                                  *mut LPDIRECT3DDEVICE9)
                                             -> HRESULT>,
    pub CloneMeshFVF: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXSPMesh,
                                                 Options: DWORD, FVF: DWORD,
                                                 pD3DDevice:
                                                     LPDIRECT3DDEVICE9,
                                                 pAdjacencyOut: *mut DWORD,
                                                 pVertexRemapOut: *mut DWORD,
                                                 ppCloneMesh: *mut LPD3DXMESH)
                                                -> HRESULT>,
    pub CloneMesh: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXSPMesh,
                                              Options: DWORD,
                                              pDeclaration:
                                                  *const D3DVERTEXELEMENT9,
                                              pD3DDevice: LPDIRECT3DDEVICE9,
                                              pAdjacencyOut: *mut DWORD,
                                              pVertexRemapOut: *mut DWORD,
                                              ppCloneMesh: *mut LPD3DXMESH)
                                             -> HRESULT>,
    pub ClonePMeshFVF: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXSPMesh,
                                                  Options: DWORD, FVF: DWORD,
                                                  pD3DDevice:
                                                      LPDIRECT3DDEVICE9,
                                                  pVertexRemapOut: *mut DWORD,
                                                  pErrorsByFace: *mut FLOAT,
                                                  ppCloneMesh:
                                                      *mut LPD3DXPMESH)
                                                 -> HRESULT>,
    pub ClonePMesh: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXSPMesh,
                                               Options: DWORD,
                                               pDeclaration:
                                                   *const D3DVERTEXELEMENT9,
                                               pD3DDevice: LPDIRECT3DDEVICE9,
                                               pVertexRemapOut: *mut DWORD,
                                               pErrorsbyFace: *mut FLOAT,
                                               ppCloneMesh: *mut LPD3DXPMESH)
                                              -> HRESULT>,
    pub ReduceFaces: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXSPMesh,
                                                Faces: DWORD) -> HRESULT>,
    pub ReduceVertices: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXSPMesh,
                                                   Vertices: DWORD)
                                                  -> HRESULT>,
    pub GetMaxFaces: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXSPMesh)
                                               -> DWORD>,
    pub GetMaxVertices: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXSPMesh)
                                                  -> DWORD>,
    pub GetVertexAttributeWeights: ::std::option::Option<extern "C" fn
                                                             (This:
                                                                  *mut ID3DXSPMesh,
                                                              pVertexAttributeWeights:
                                                                  LPD3DXATTRIBUTEWEIGHTS)
                                                             -> HRESULT>,
    pub GetVertexWeights: ::std::option::Option<extern "C" fn
                                                    (This: *mut ID3DXSPMesh,
                                                     pVertexWeights:
                                                         *mut FLOAT)
                                                    -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXSPMeshVtbl {
    fn default() -> Struct_ID3DXSPMeshVtbl { unsafe { ::std::mem::zeroed() } }
}
pub type Enum__D3DXMESHOPT = ::libc::c_uint;
pub const D3DXMESHOPT_COMPACT: ::libc::c_uint = 16777216;
pub const D3DXMESHOPT_ATTRSORT: ::libc::c_uint = 33554432;
pub const D3DXMESHOPT_VERTEXCACHE: ::libc::c_uint = 67108864;
pub const D3DXMESHOPT_STRIPREORDER: ::libc::c_uint = 134217728;
pub const D3DXMESHOPT_IGNOREVERTS: ::libc::c_uint = 268435456;
pub const D3DXMESHOPT_DONOTSPLIT: ::libc::c_uint = 536870912;
pub const D3DXMESHOPT_DEVICEINDEPENDENT: ::libc::c_uint = 4194304;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXBONECOMBINATION {
    pub AttribId: DWORD,
    pub FaceStart: DWORD,
    pub FaceCount: DWORD,
    pub VertexStart: DWORD,
    pub VertexCount: DWORD,
    pub BoneId: *mut DWORD,
}
impl ::std::default::Default for Struct__D3DXBONECOMBINATION {
    fn default() -> Struct__D3DXBONECOMBINATION {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXBONECOMBINATION = Struct__D3DXBONECOMBINATION;
pub type LPD3DXBONECOMBINATION = *mut Struct__D3DXBONECOMBINATION;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXPATCHINFO {
    pub PatchType: D3DXPATCHMESHTYPE,
    pub Degree: D3DDEGREETYPE,
    pub Basis: D3DBASISTYPE,
}
impl ::std::default::Default for Struct__D3DXPATCHINFO {
    fn default() -> Struct__D3DXPATCHINFO { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXPATCHINFO = Struct__D3DXPATCHINFO;
pub type LPD3DXPATCHINFO = *mut Struct__D3DXPATCHINFO;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXPatchMesh {
    pub lpVtbl: *mut Struct_ID3DXPatchMeshVtbl,
}
impl ::std::default::Default for Struct_ID3DXPatchMesh {
    fn default() -> Struct_ID3DXPatchMesh { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXPatchMesh = Struct_ID3DXPatchMesh;
pub type ID3DXPatchMeshVtbl = Struct_ID3DXPatchMeshVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXPatchMeshVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPatchMesh,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXPatchMesh)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXPatchMesh)
                                           -> ULONG>,
    pub GetNumPatches: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXPatchMesh)
                                                 -> DWORD>,
    pub GetNumVertices: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPatchMesh)
                                                  -> DWORD>,
    pub GetDeclaration: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPatchMesh,
                                                   Declaration:
                                                       *mut D3DVERTEXELEMENT9)
                                                  -> HRESULT>,
    pub GetControlVerticesPerPatch: ::std::option::Option<extern "C" fn
                                                              (This:
                                                                   *mut ID3DXPatchMesh)
                                                              -> DWORD>,
    pub GetOptions: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXPatchMesh)
                                              -> DWORD>,
    pub GetDevice: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPatchMesh,
                                              ppDevice:
                                                  *mut LPDIRECT3DDEVICE9)
                                             -> HRESULT>,
    pub GetPatchInfo: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXPatchMesh,
                                                 PatchInfo: LPD3DXPATCHINFO)
                                                -> HRESULT>,
    pub GetVertexBuffer: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXPatchMesh,
                                                    ppVB:
                                                        *mut LPDIRECT3DVERTEXBUFFER9)
                                                   -> HRESULT>,
    pub GetIndexBuffer: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPatchMesh,
                                                   ppIB:
                                                       *mut LPDIRECT3DINDEXBUFFER9)
                                                  -> HRESULT>,
    pub LockVertexBuffer: ::std::option::Option<extern "C" fn
                                                    (This:
                                                         *mut ID3DXPatchMesh,
                                                     flags: DWORD,
                                                     ppData: *mut LPVOID)
                                                    -> HRESULT>,
    pub UnlockVertexBuffer: ::std::option::Option<extern "C" fn
                                                      (This:
                                                           *mut ID3DXPatchMesh)
                                                      -> HRESULT>,
    pub LockIndexBuffer: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXPatchMesh,
                                                    flags: DWORD,
                                                    ppData: *mut LPVOID)
                                                   -> HRESULT>,
    pub UnlockIndexBuffer: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXPatchMesh)
                                                     -> HRESULT>,
    pub LockAttributeBuffer: ::std::option::Option<extern "C" fn
                                                       (This:
                                                            *mut ID3DXPatchMesh,
                                                        flags: DWORD,
                                                        ppData:
                                                            *mut *mut DWORD)
                                                       -> HRESULT>,
    pub UnlockAttributeBuffer: ::std::option::Option<extern "C" fn
                                                         (This:
                                                              *mut ID3DXPatchMesh)
                                                         -> HRESULT>,
    pub GetTessSize: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXPatchMesh,
                                                fTessLevel: FLOAT,
                                                Adaptive: DWORD,
                                                NumTriangles: *mut DWORD,
                                                NumVertices: *mut DWORD)
                                               -> HRESULT>,
    pub GenerateAdjacency: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXPatchMesh,
                                                      Tolerance: FLOAT)
                                                     -> HRESULT>,
    pub CloneMesh: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPatchMesh,
                                              Options: DWORD,
                                              pDecl: *const D3DVERTEXELEMENT9,
                                              pMesh: *mut LPD3DXPATCHMESH)
                                             -> HRESULT>,
    pub Optimize: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXPatchMesh,
                                             flags: DWORD) -> HRESULT>,
    pub SetDisplaceParam: ::std::option::Option<extern "C" fn
                                                    (This:
                                                         *mut ID3DXPatchMesh,
                                                     Texture:
                                                         LPDIRECT3DBASETEXTURE9,
                                                     MinFilter:
                                                         D3DTEXTUREFILTERTYPE,
                                                     MagFilter:
                                                         D3DTEXTUREFILTERTYPE,
                                                     MipFilter:
                                                         D3DTEXTUREFILTERTYPE,
                                                     Wrap: D3DTEXTUREADDRESS,
                                                     dwLODBias: DWORD)
                                                    -> HRESULT>,
    pub GetDisplaceParam: ::std::option::Option<extern "C" fn
                                                    (This:
                                                         *mut ID3DXPatchMesh,
                                                     Texture:
                                                         *mut LPDIRECT3DBASETEXTURE9,
                                                     MinFilter:
                                                         *mut D3DTEXTUREFILTERTYPE,
                                                     MagFilter:
                                                         *mut D3DTEXTUREFILTERTYPE,
                                                     MipFilter:
                                                         *mut D3DTEXTUREFILTERTYPE,
                                                     Wrap:
                                                         *mut D3DTEXTUREADDRESS,
                                                     dwLODBias: *mut DWORD)
                                                    -> HRESULT>,
    pub Tessellate: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXPatchMesh,
                                               fTessLevel: FLOAT,
                                               pMesh: LPD3DXMESH) -> HRESULT>,
    pub TessellateAdaptive: ::std::option::Option<extern "C" fn
                                                      (This:
                                                           *mut ID3DXPatchMesh,
                                                       pTrans:
                                                           *const D3DXVECTOR4,
                                                       dwMaxTessLevel: DWORD,
                                                       dwMinTessLevel: DWORD,
                                                       pMesh: LPD3DXMESH)
                                                      -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXPatchMeshVtbl {
    fn default() -> Struct_ID3DXPatchMeshVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXSkinInfo {
    pub lpVtbl: *mut Struct_ID3DXSkinInfoVtbl,
}
impl ::std::default::Default for Struct_ID3DXSkinInfo {
    fn default() -> Struct_ID3DXSkinInfo { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXSkinInfo = Struct_ID3DXSkinInfo;
pub type ID3DXSkinInfoVtbl = Struct_ID3DXSkinInfoVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXSkinInfoVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXSkinInfo,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXSkinInfo)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn(This: *mut ID3DXSkinInfo)
                                           -> ULONG>,
    pub SetBoneInfluence: ::std::option::Option<extern "C" fn
                                                    (This: *mut ID3DXSkinInfo,
                                                     bone: DWORD,
                                                     numInfluences: DWORD,
                                                     vertices: *const DWORD,
                                                     weights: *const FLOAT)
                                                    -> HRESULT>,
    pub SetBoneVertexInfluence: ::std::option::Option<extern "C" fn
                                                          (This:
                                                               *mut ID3DXSkinInfo,
                                                           boneNum: DWORD,
                                                           influenceNum:
                                                               DWORD,
                                                           weight:
                                                               ::libc::c_float)
                                                          -> HRESULT>,
    pub GetNumBoneInfluences: ::std::option::Option<extern "C" fn
                                                        (This:
                                                             *mut ID3DXSkinInfo,
                                                         bone: DWORD)
                                                        -> DWORD>,
    pub GetBoneInfluence: ::std::option::Option<extern "C" fn
                                                    (This: *mut ID3DXSkinInfo,
                                                     bone: DWORD,
                                                     vertices: *mut DWORD,
                                                     weights: *mut FLOAT)
                                                    -> HRESULT>,
    pub GetBoneVertexInfluence: ::std::option::Option<extern "C" fn
                                                          (This:
                                                               *mut ID3DXSkinInfo,
                                                           boneNum: DWORD,
                                                           influenceNum:
                                                               DWORD,
                                                           pWeight:
                                                               *mut ::libc::c_float,
                                                           pVertexNum:
                                                               *mut DWORD)
                                                          -> HRESULT>,
    pub GetMaxVertexInfluences: ::std::option::Option<extern "C" fn
                                                          (This:
                                                               *mut ID3DXSkinInfo,
                                                           maxVertexInfluences:
                                                               *mut DWORD)
                                                          -> HRESULT>,
    pub GetNumBones: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXSkinInfo)
                                               -> DWORD>,
    pub FindBoneVertexInfluenceIndex: ::std::option::Option<extern "C" fn
                                                                (This:
                                                                     *mut ID3DXSkinInfo,
                                                                 boneNum:
                                                                     DWORD,
                                                                 vertexNum:
                                                                     DWORD,
                                                                 pInfluenceIndex:
                                                                     *mut DWORD)
                                                                -> HRESULT>,
    pub GetMaxFaceInfluences: ::std::option::Option<extern "C" fn
                                                        (This:
                                                             *mut ID3DXSkinInfo,
                                                         pIB:
                                                             LPDIRECT3DINDEXBUFFER9,
                                                         NumFaces: DWORD,
                                                         maxFaceInfluences:
                                                             *mut DWORD)
                                                        -> HRESULT>,
    pub SetMinBoneInfluence: ::std::option::Option<extern "C" fn
                                                       (This:
                                                            *mut ID3DXSkinInfo,
                                                        MinInfl: FLOAT)
                                                       -> HRESULT>,
    pub GetMinBoneInfluence: ::std::option::Option<extern "C" fn
                                                       (This:
                                                            *mut ID3DXSkinInfo)
                                                       -> FLOAT>,
    pub SetBoneName: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXSkinInfo,
                                                Bone: DWORD, pName: LPCSTR)
                                               -> HRESULT>,
    pub GetBoneName: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXSkinInfo,
                                                Bone: DWORD) -> LPCSTR>,
    pub SetBoneOffsetMatrix: ::std::option::Option<extern "C" fn
                                                       (This:
                                                            *mut ID3DXSkinInfo,
                                                        Bone: DWORD,
                                                        pBoneTransform:
                                                            *const D3DXMATRIX)
                                                       -> HRESULT>,
    pub GetBoneOffsetMatrix: ::std::option::Option<extern "C" fn
                                                       (This:
                                                            *mut ID3DXSkinInfo,
                                                        Bone: DWORD)
                                                       -> LPD3DXMATRIX>,
    pub Clone: ::std::option::Option<extern "C" fn
                                         (This: *mut ID3DXSkinInfo,
                                          ppSkinInfo: *mut LPD3DXSKININFO)
                                         -> HRESULT>,
    pub Remap: ::std::option::Option<extern "C" fn
                                         (This: *mut ID3DXSkinInfo,
                                          NumVertices: DWORD,
                                          pVertexRemap: *mut DWORD)
                                         -> HRESULT>,
    pub SetFVF: ::std::option::Option<extern "C" fn
                                          (This: *mut ID3DXSkinInfo,
                                           FVF: DWORD) -> HRESULT>,
    pub SetDeclaration: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXSkinInfo,
                                                   pDeclaration:
                                                       *const D3DVERTEXELEMENT9)
                                                  -> HRESULT>,
    pub GetFVF: ::std::option::Option<extern "C" fn(This: *mut ID3DXSkinInfo)
                                          -> DWORD>,
    pub GetDeclaration: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXSkinInfo,
                                                   Declaration:
                                                       *mut D3DVERTEXELEMENT9)
                                                  -> HRESULT>,
    pub UpdateSkinnedMesh: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXSkinInfo,
                                                      pBoneTransforms:
                                                          *const D3DXMATRIX,
                                                      pBoneInvTransposeTransforms:
                                                          *const D3DXMATRIX,
                                                      pVerticesSrc: LPCVOID,
                                                      pVerticesDst: PVOID)
                                                     -> HRESULT>,
    pub ConvertToBlendedMesh: ::std::option::Option<extern "C" fn
                                                        (This:
                                                             *mut ID3DXSkinInfo,
                                                         pMesh: LPD3DXMESH,
                                                         Options: DWORD,
                                                         pAdjacencyIn:
                                                             *const DWORD,
                                                         pAdjacencyOut:
                                                             LPDWORD,
                                                         pFaceRemap:
                                                             *mut DWORD,
                                                         ppVertexRemap:
                                                             *mut LPD3DXBUFFER,
                                                         pMaxFaceInfl:
                                                             *mut DWORD,
                                                         pNumBoneCombinations:
                                                             *mut DWORD,
                                                         ppBoneCombinationTable:
                                                             *mut LPD3DXBUFFER,
                                                         ppMesh:
                                                             *mut LPD3DXMESH)
                                                        -> HRESULT>,
    pub ConvertToIndexedBlendedMesh: ::std::option::Option<extern "C" fn
                                                               (This:
                                                                    *mut ID3DXSkinInfo,
                                                                pMesh:
                                                                    LPD3DXMESH,
                                                                Options:
                                                                    DWORD,
                                                                paletteSize:
                                                                    DWORD,
                                                                pAdjacencyIn:
                                                                    *const DWORD,
                                                                pAdjacencyOut:
                                                                    LPDWORD,
                                                                pFaceRemap:
                                                                    *mut DWORD,
                                                                ppVertexRemap:
                                                                    *mut LPD3DXBUFFER,
                                                                pMaxVertexInfl:
                                                                    *mut DWORD,
                                                                pNumBoneCombinations:
                                                                    *mut DWORD,
                                                                ppBoneCombinationTable:
                                                                    *mut LPD3DXBUFFER,
                                                                ppMesh:
                                                                    *mut LPD3DXMESH)
                                                               -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXSkinInfoVtbl {
    fn default() -> Struct_ID3DXSkinInfoVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXINTERSECTINFO {
    pub FaceIndex: DWORD,
    pub U: FLOAT,
    pub V: FLOAT,
    pub Dist: FLOAT,
}
impl ::std::default::Default for Struct__D3DXINTERSECTINFO {
    fn default() -> Struct__D3DXINTERSECTINFO {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXINTERSECTINFO = Struct__D3DXINTERSECTINFO;
pub type LPD3DXINTERSECTINFO = *mut Struct__D3DXINTERSECTINFO;
pub type LPD3DXUVATLASCB =
    ::std::option::Option<extern "C" fn
                              (fPercentDone: FLOAT, lpUserContext: LPVOID)
                              -> HRESULT>;
pub type LPD3DXIMTSIGNALCALLBACK =
    ::std::option::Option<extern "C" fn
                              (uv: *const D3DXVECTOR2, uPrimitiveID: UINT,
                               uSignalDimension: UINT,
                               pUserData: *mut ::libc::c_void,
                               pfSignalOut: *mut FLOAT) -> HRESULT>;
pub type Enum__D3DXSHCOMPRESSQUALITYTYPE = ::libc::c_uint;
pub const D3DXSHCQUAL_FASTLOWQUALITY: ::libc::c_uint = 1;
pub const D3DXSHCQUAL_SLOWHIGHQUALITY: ::libc::c_uint = 2;
pub const D3DXSHCQUAL_FORCE_DWORD: ::libc::c_uint = 2147483647;
pub type D3DXSHCOMPRESSQUALITYTYPE = Enum__D3DXSHCOMPRESSQUALITYTYPE;
pub type Enum__D3DXSHGPUSIMOPT = ::libc::c_uint;
pub const D3DXSHGPUSIMOPT_SHADOWRES256: ::libc::c_uint = 1;
pub const D3DXSHGPUSIMOPT_SHADOWRES512: ::libc::c_uint = 0;
pub const D3DXSHGPUSIMOPT_SHADOWRES1024: ::libc::c_uint = 2;
pub const D3DXSHGPUSIMOPT_SHADOWRES2048: ::libc::c_uint = 3;
pub const D3DXSHGPUSIMOPT_HIGHQUALITY: ::libc::c_uint = 4;
pub const D3DXSHGPUSIMOPT_FORCE_DWORD: ::libc::c_uint = 2147483647;
pub type D3DXSHGPUSIMOPT = Enum__D3DXSHGPUSIMOPT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXSHMATERIAL {
    pub Diffuse: D3DCOLORVALUE,
    pub bMirror: BOOL,
    pub bSubSurf: BOOL,
    pub RelativeIndexOfRefraction: FLOAT,
    pub Absorption: D3DCOLORVALUE,
    pub ReducedScattering: D3DCOLORVALUE,
}
impl ::std::default::Default for Struct__D3DXSHMATERIAL {
    fn default() -> Struct__D3DXSHMATERIAL { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXSHMATERIAL = Struct__D3DXSHMATERIAL;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXSHPRTSPLITMESHVERTDATA {
    pub uVertRemap: UINT,
    pub uSubCluster: UINT,
    pub ucVertStatus: UCHAR,
}
impl ::std::default::Default for Struct__D3DXSHPRTSPLITMESHVERTDATA {
    fn default() -> Struct__D3DXSHPRTSPLITMESHVERTDATA {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXSHPRTSPLITMESHVERTDATA = Struct__D3DXSHPRTSPLITMESHVERTDATA;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXSHPRTSPLITMESHCLUSTERDATA {
    pub uVertStart: UINT,
    pub uVertLength: UINT,
    pub uFaceStart: UINT,
    pub uFaceLength: UINT,
    pub uClusterStart: UINT,
    pub uClusterLength: UINT,
}
impl ::std::default::Default for Struct__D3DXSHPRTSPLITMESHCLUSTERDATA {
    fn default() -> Struct__D3DXSHPRTSPLITMESHCLUSTERDATA {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXSHPRTSPLITMESHCLUSTERDATA =
    Struct__D3DXSHPRTSPLITMESHCLUSTERDATA;
pub type LPD3DXSHPRTSIMCB =
    ::std::option::Option<extern "C" fn
                              (fPercentDone: ::libc::c_float,
                               lpUserContext: LPVOID) -> HRESULT>;
pub type ID3DXTextureGutterHelper = Struct_ID3DXTextureGutterHelper;
pub type ID3DXPRTBuffer = Struct_ID3DXPRTBuffer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXPRTBuffer {
    pub lpVtbl: *mut Struct_ID3DXPRTBufferVtbl,
}
impl ::std::default::Default for Struct_ID3DXPRTBuffer {
    fn default() -> Struct_ID3DXPRTBuffer { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXPRTBufferVtbl = Struct_ID3DXPRTBufferVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXPRTBufferVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPRTBuffer,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXPRTBuffer)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXPRTBuffer)
                                           -> ULONG>,
    pub GetNumSamples: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXPRTBuffer)
                                                 -> UINT>,
    pub GetNumCoeffs: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXPRTBuffer)
                                                -> UINT>,
    pub GetNumChannels: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPRTBuffer)
                                                  -> UINT>,
    pub IsTexture: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPRTBuffer)
                                             -> BOOL>,
    pub GetWidth: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXPRTBuffer)
                                            -> UINT>,
    pub GetHeight: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPRTBuffer)
                                             -> UINT>,
    pub Resize: ::std::option::Option<extern "C" fn
                                          (This: *mut ID3DXPRTBuffer,
                                           NewSize: UINT) -> HRESULT>,
    pub LockBuffer: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXPRTBuffer,
                                               Start: UINT, NumSamples: UINT,
                                               ppData: *mut *mut FLOAT)
                                              -> HRESULT>,
    pub UnlockBuffer: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXPRTBuffer)
                                                -> HRESULT>,
    pub ScaleBuffer: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXPRTBuffer,
                                                Scale: FLOAT) -> HRESULT>,
    pub AddBuffer: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPRTBuffer,
                                              pBuffer: LPD3DXPRTBUFFER)
                                             -> HRESULT>,
    pub AttachGH: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXPRTBuffer,
                                             arg1: LPD3DXTEXTUREGUTTERHELPER)
                                            -> HRESULT>,
    pub ReleaseGH: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPRTBuffer)
                                             -> HRESULT>,
    pub EvalGH: ::std::option::Option<extern "C" fn(This: *mut ID3DXPRTBuffer)
                                          -> HRESULT>,
    pub ExtractTexture: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPRTBuffer,
                                                   Channel: UINT,
                                                   StartCoefficient: UINT,
                                                   NumCoefficients: UINT,
                                                   pTexture:
                                                       LPDIRECT3DTEXTURE9)
                                                  -> HRESULT>,
    pub ExtractToMesh: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXPRTBuffer,
                                                  NumCoefficients: UINT,
                                                  Usage: D3DDECLUSAGE,
                                                  UsageIndexStart: UINT,
                                                  pScene: LPD3DXMESH)
                                                 -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXPRTBufferVtbl {
    fn default() -> Struct_ID3DXPRTBufferVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ID3DXPRTCompBuffer = Struct_ID3DXPRTCompBuffer;
pub type LPD3DXPRTCOMPBUFFER = *mut Struct_ID3DXPRTCompBuffer;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXPRTCompBuffer {
    pub lpVtbl: *mut Struct_ID3DXPRTCompBufferVtbl,
}
impl ::std::default::Default for Struct_ID3DXPRTCompBuffer {
    fn default() -> Struct_ID3DXPRTCompBuffer {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ID3DXPRTCompBufferVtbl = Struct_ID3DXPRTCompBufferVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXPRTCompBufferVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXPRTCompBuffer,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn
                                          (This: *mut ID3DXPRTCompBuffer)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXPRTCompBuffer)
                                           -> ULONG>,
    pub GetNumSamples: ::std::option::Option<extern "C" fn
                                                 (This:
                                                      *mut ID3DXPRTCompBuffer)
                                                 -> UINT>,
    pub GetNumCoeffs: ::std::option::Option<extern "C" fn
                                                (This:
                                                     *mut ID3DXPRTCompBuffer)
                                                -> UINT>,
    pub GetNumChannels: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXPRTCompBuffer)
                                                  -> UINT>,
    pub IsTexture: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPRTCompBuffer)
                                             -> BOOL>,
    pub GetWidth: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXPRTCompBuffer)
                                            -> UINT>,
    pub GetHeight: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPRTCompBuffer)
                                             -> UINT>,
    pub GetNumClusters: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXPRTCompBuffer)
                                                  -> UINT>,
    pub GetNumPCA: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPRTCompBuffer)
                                             -> UINT>,
    pub NormalizeData: ::std::option::Option<extern "C" fn
                                                 (This:
                                                      *mut ID3DXPRTCompBuffer)
                                                 -> HRESULT>,
    pub ExtractBasis: ::std::option::Option<extern "C" fn
                                                (This:
                                                     *mut ID3DXPRTCompBuffer,
                                                 Cluster: UINT,
                                                 pClusterBasis: *mut FLOAT)
                                                -> HRESULT>,
    pub ExtractClusterIDs: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXPRTCompBuffer,
                                                      pClusterIDs: *mut UINT)
                                                     -> HRESULT>,
    pub ExtractPCA: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXPRTCompBuffer,
                                               StartPCA: UINT,
                                               NumExtract: UINT,
                                               pPCACoefficients: *mut FLOAT)
                                              -> HRESULT>,
    pub ExtractTexture: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXPRTCompBuffer,
                                                   StartPCA: UINT,
                                                   NumpPCA: UINT,
                                                   pTexture:
                                                       LPDIRECT3DTEXTURE9)
                                                  -> HRESULT>,
    pub ExtractToMesh: ::std::option::Option<extern "C" fn
                                                 (This:
                                                      *mut ID3DXPRTCompBuffer,
                                                  NumPCA: UINT,
                                                  Usage: D3DDECLUSAGE,
                                                  UsageIndexStart: UINT,
                                                  pScene: LPD3DXMESH)
                                                 -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXPRTCompBufferVtbl {
    fn default() -> Struct_ID3DXPRTCompBufferVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXTextureGutterHelper {
    pub lpVtbl: *mut Struct_ID3DXTextureGutterHelperVtbl,
}
impl ::std::default::Default for Struct_ID3DXTextureGutterHelper {
    fn default() -> Struct_ID3DXTextureGutterHelper {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ID3DXTextureGutterHelperVtbl = Struct_ID3DXTextureGutterHelperVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXTextureGutterHelperVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXTextureGutterHelper,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn
                                          (This:
                                               *mut ID3DXTextureGutterHelper)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn
                                           (This:
                                                *mut ID3DXTextureGutterHelper)
                                           -> ULONG>,
    pub GetWidth: ::std::option::Option<extern "C" fn
                                            (This:
                                                 *mut ID3DXTextureGutterHelper)
                                            -> UINT>,
    pub GetHeight: ::std::option::Option<extern "C" fn
                                             (This:
                                                  *mut ID3DXTextureGutterHelper)
                                             -> UINT>,
    pub ApplyGuttersFloat: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXTextureGutterHelper,
                                                      pDataIn: *mut FLOAT,
                                                      NumCoeffs: UINT,
                                                      Width: UINT,
                                                      Height: UINT)
                                                     -> HRESULT>,
    pub ApplyGuttersTex: ::std::option::Option<extern "C" fn
                                                   (This:
                                                        *mut ID3DXTextureGutterHelper,
                                                    pTexture:
                                                        LPDIRECT3DTEXTURE9)
                                                   -> HRESULT>,
    pub ApplyGuttersPRT: ::std::option::Option<extern "C" fn
                                                   (This:
                                                        *mut ID3DXTextureGutterHelper,
                                                    pBuffer: LPD3DXPRTBUFFER)
                                                   -> HRESULT>,
    pub ResampleTex: ::std::option::Option<extern "C" fn
                                               (This:
                                                    *mut ID3DXTextureGutterHelper,
                                                pTextureIn:
                                                    LPDIRECT3DTEXTURE9,
                                                pMeshIn: LPD3DXMESH,
                                                Usage: D3DDECLUSAGE,
                                                UsageIndex: UINT,
                                                pTextureOut:
                                                    LPDIRECT3DTEXTURE9)
                                               -> HRESULT>,
    pub GetFaceMap: ::std::option::Option<extern "C" fn
                                              (This:
                                                   *mut ID3DXTextureGutterHelper,
                                               pFaceData: *mut UINT)
                                              -> HRESULT>,
    pub GetBaryMap: ::std::option::Option<extern "C" fn
                                              (This:
                                                   *mut ID3DXTextureGutterHelper,
                                               pBaryData: *mut D3DXVECTOR2)
                                              -> HRESULT>,
    pub GetTexelMap: ::std::option::Option<extern "C" fn
                                               (This:
                                                    *mut ID3DXTextureGutterHelper,
                                                pTexelData: *mut D3DXVECTOR2)
                                               -> HRESULT>,
    pub GetGutterMap: ::std::option::Option<extern "C" fn
                                                (This:
                                                     *mut ID3DXTextureGutterHelper,
                                                 pGutterData: *mut BYTE)
                                                -> HRESULT>,
    pub SetFaceMap: ::std::option::Option<extern "C" fn
                                              (This:
                                                   *mut ID3DXTextureGutterHelper,
                                               pFaceData: *mut UINT)
                                              -> HRESULT>,
    pub SetBaryMap: ::std::option::Option<extern "C" fn
                                              (This:
                                                   *mut ID3DXTextureGutterHelper,
                                               pBaryData: *mut D3DXVECTOR2)
                                              -> HRESULT>,
    pub SetTexelMap: ::std::option::Option<extern "C" fn
                                               (This:
                                                    *mut ID3DXTextureGutterHelper,
                                                pTexelData: *mut D3DXVECTOR2)
                                               -> HRESULT>,
    pub SetGutterMap: ::std::option::Option<extern "C" fn
                                                (This:
                                                     *mut ID3DXTextureGutterHelper,
                                                 pGutterData: *mut BYTE)
                                                -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXTextureGutterHelperVtbl {
    fn default() -> Struct_ID3DXTextureGutterHelperVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ID3DXPRTEngine = Struct_ID3DXPRTEngine;
pub type LPD3DXPRTENGINE = *mut Struct_ID3DXPRTEngine;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXPRTEngine {
    pub lpVtbl: *mut Struct_ID3DXPRTEngineVtbl,
}
impl ::std::default::Default for Struct_ID3DXPRTEngine {
    fn default() -> Struct_ID3DXPRTEngine { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXPRTEngineVtbl = Struct_ID3DXPRTEngineVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXPRTEngineVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPRTEngine,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn(This: *mut ID3DXPRTEngine)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXPRTEngine)
                                           -> ULONG>,
    pub SetMeshMaterials: ::std::option::Option<extern "C" fn
                                                    (This:
                                                         *mut ID3DXPRTEngine,
                                                     ppMaterials:
                                                         *mut *const D3DXSHMATERIAL,
                                                     NumMeshes: UINT,
                                                     NumChannels: UINT,
                                                     bSetAlbedo: BOOL,
                                                     fLengthScale: FLOAT)
                                                    -> HRESULT>,
    pub SetPerVertexAlbedo: ::std::option::Option<extern "C" fn
                                                      (This:
                                                           *mut ID3DXPRTEngine,
                                                       pDataIn:
                                                           *const ::libc::c_void,
                                                       NumChannels: UINT,
                                                       Stride: UINT)
                                                      -> HRESULT>,
    pub SetPerTexelAlbedo: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXPRTEngine,
                                                      pAlbedoTexture:
                                                          LPDIRECT3DTEXTURE9,
                                                      NumChannels: UINT,
                                                      pGH:
                                                          LPD3DXTEXTUREGUTTERHELPER)
                                                     -> HRESULT>,
    pub GetVertexAlbedo: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXPRTEngine,
                                                    pVertColors:
                                                        *mut D3DXCOLOR,
                                                    NumVerts: UINT)
                                                   -> HRESULT>,
    pub SetPerTexelNormal: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXPRTEngine,
                                                      pNormalTexture:
                                                          LPDIRECT3DTEXTURE9)
                                                     -> HRESULT>,
    pub ExtractPerVertexAlbedo: ::std::option::Option<extern "C" fn
                                                          (This:
                                                               *mut ID3DXPRTEngine,
                                                           pMesh: LPD3DXMESH,
                                                           Usage:
                                                               D3DDECLUSAGE,
                                                           NumChannels: UINT)
                                                          -> HRESULT>,
    pub ResampleBuffer: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPRTEngine,
                                                   pBufferIn: LPD3DXPRTBUFFER,
                                                   pBufferOut:
                                                       LPD3DXPRTBUFFER)
                                                  -> HRESULT>,
    pub GetAdaptedMesh: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPRTEngine,
                                                   pD3DDevice:
                                                       LPDIRECT3DDEVICE9,
                                                   pFaceRemap: *mut UINT,
                                                   pVertRemap: *mut UINT,
                                                   pfVertWeights: *mut FLOAT,
                                                   ppMesh: *mut LPD3DXMESH)
                                                  -> HRESULT>,
    pub GetNumVerts: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXPRTEngine)
                                               -> UINT>,
    pub GetNumFaces: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXPRTEngine)
                                               -> UINT>,
    pub SetMinMaxIntersection: ::std::option::Option<extern "C" fn
                                                         (This:
                                                              *mut ID3DXPRTEngine,
                                                          fMin: FLOAT,
                                                          fMax: FLOAT)
                                                         -> HRESULT>,
    pub RobustMeshRefine: ::std::option::Option<extern "C" fn
                                                    (This:
                                                         *mut ID3DXPRTEngine,
                                                     MinEdgeLength: FLOAT,
                                                     MaxSubdiv: UINT)
                                                    -> HRESULT>,
    pub SetSamplingInfo: ::std::option::Option<extern "C" fn
                                                   (This: *mut ID3DXPRTEngine,
                                                    NumRays: UINT,
                                                    UseSphere: BOOL,
                                                    UseCosine: BOOL,
                                                    Adaptive: BOOL,
                                                    AdaptiveThresh: FLOAT)
                                                   -> HRESULT>,
    pub ComputeDirectLightingSH: ::std::option::Option<extern "C" fn
                                                           (This:
                                                                *mut ID3DXPRTEngine,
                                                            SHOrder: UINT,
                                                            pDataOut:
                                                                LPD3DXPRTBUFFER)
                                                           -> HRESULT>,
    pub ComputeDirectLightingSHAdaptive: ::std::option::Option<extern "C" fn
                                                                   (This:
                                                                        *mut ID3DXPRTEngine,
                                                                    SHOrder:
                                                                        UINT,
                                                                    AdaptiveThresh:
                                                                        FLOAT,
                                                                    MinEdgeLength:
                                                                        FLOAT,
                                                                    MaxSubdiv:
                                                                        UINT,
                                                                    pDataOut:
                                                                        LPD3DXPRTBUFFER)
                                                                   ->
                                                                       HRESULT>,
    pub ComputeDirectLightingSHGPU: ::std::option::Option<extern "C" fn
                                                              (This:
                                                                   *mut ID3DXPRTEngine,
                                                               pD3DDevice:
                                                                   LPDIRECT3DDEVICE9,
                                                               Flags: UINT,
                                                               SHOrder: UINT,
                                                               ZBias: FLOAT,
                                                               ZAngleBias:
                                                                   FLOAT,
                                                               pDataOut:
                                                                   LPD3DXPRTBUFFER)
                                                              -> HRESULT>,
    pub ComputeSS: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXPRTEngine,
                                              pDataIn: LPD3DXPRTBUFFER,
                                              pDataOut: LPD3DXPRTBUFFER,
                                              pDataTotal: LPD3DXPRTBUFFER)
                                             -> HRESULT>,
    pub ComputeSSAdaptive: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXPRTEngine,
                                                      pDataIn:
                                                          LPD3DXPRTBUFFER,
                                                      AdaptiveThresh: FLOAT,
                                                      MinEdgeLength: FLOAT,
                                                      MaxSubdiv: UINT,
                                                      pDataOut:
                                                          LPD3DXPRTBUFFER,
                                                      pDataTotal:
                                                          LPD3DXPRTBUFFER)
                                                     -> HRESULT>,
    pub ComputeBounce: ::std::option::Option<extern "C" fn
                                                 (This: *mut ID3DXPRTEngine,
                                                  pDataIn: LPD3DXPRTBUFFER,
                                                  pDataOut: LPD3DXPRTBUFFER,
                                                  pDataTotal: LPD3DXPRTBUFFER)
                                                 -> HRESULT>,
    pub ComputeBounceAdaptive: ::std::option::Option<extern "C" fn
                                                         (This:
                                                              *mut ID3DXPRTEngine,
                                                          pDataIn:
                                                              LPD3DXPRTBUFFER,
                                                          AdaptiveThresh:
                                                              FLOAT,
                                                          MinEdgeLength:
                                                              FLOAT,
                                                          MaxSubdiv: UINT,
                                                          pDataOut:
                                                              LPD3DXPRTBUFFER,
                                                          pDataTotal:
                                                              LPD3DXPRTBUFFER)
                                                         -> HRESULT>,
    pub ComputeVolumeSamplesDirectSH: ::std::option::Option<extern "C" fn
                                                                (This:
                                                                     *mut ID3DXPRTEngine,
                                                                 SHOrderIn:
                                                                     UINT,
                                                                 SHOrderOut:
                                                                     UINT,
                                                                 NumVolSamples:
                                                                     UINT,
                                                                 pSampleLocs:
                                                                     *const D3DXVECTOR3,
                                                                 pDataOut:
                                                                     LPD3DXPRTBUFFER)
                                                                -> HRESULT>,
    pub ComputeVolumeSamples: ::std::option::Option<extern "C" fn
                                                        (This:
                                                             *mut ID3DXPRTEngine,
                                                         pSurfDataIn:
                                                             LPD3DXPRTBUFFER,
                                                         SHOrder: UINT,
                                                         NumVolSamples: UINT,
                                                         pSampleLocs:
                                                             *const D3DXVECTOR3,
                                                         pDataOut:
                                                             LPD3DXPRTBUFFER)
                                                        -> HRESULT>,
    pub ComputeSurfSamplesDirectSH: ::std::option::Option<extern "C" fn
                                                              (This:
                                                                   *mut ID3DXPRTEngine,
                                                               SHOrder: UINT,
                                                               NumSamples:
                                                                   UINT,
                                                               pSampleLocs:
                                                                   *const D3DXVECTOR3,
                                                               pSampleNorms:
                                                                   *const D3DXVECTOR3,
                                                               pDataOut:
                                                                   LPD3DXPRTBUFFER)
                                                              -> HRESULT>,
    pub ComputeSurfSamplesBounce: ::std::option::Option<extern "C" fn
                                                            (This:
                                                                 *mut ID3DXPRTEngine,
                                                             pSurfDataIn:
                                                                 LPD3DXPRTBUFFER,
                                                             NumSamples: UINT,
                                                             pSampleLocs:
                                                                 *const D3DXVECTOR3,
                                                             pSampleNorms:
                                                                 *const D3DXVECTOR3,
                                                             pDataOut:
                                                                 LPD3DXPRTBUFFER,
                                                             pDataTotal:
                                                                 LPD3DXPRTBUFFER)
                                                            -> HRESULT>,
    pub FreeSSData: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXPRTEngine)
                                              -> HRESULT>,
    pub FreeBounceData: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPRTEngine)
                                                  -> HRESULT>,
    pub ComputeLDPRTCoeffs: ::std::option::Option<extern "C" fn
                                                      (This:
                                                           *mut ID3DXPRTEngine,
                                                       pDataIn:
                                                           LPD3DXPRTBUFFER,
                                                       SHOrder: UINT,
                                                       pNormOut:
                                                           *mut D3DXVECTOR3,
                                                       pDataOut:
                                                           LPD3DXPRTBUFFER)
                                                      -> HRESULT>,
    pub ScaleMeshChunk: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPRTEngine,
                                                   uMeshChunk: UINT,
                                                   fScale: FLOAT,
                                                   pDataOut: LPD3DXPRTBUFFER)
                                                  -> HRESULT>,
    pub MultiplyAlbedo: ::std::option::Option<extern "C" fn
                                                  (This: *mut ID3DXPRTEngine,
                                                   pDataOut: LPD3DXPRTBUFFER)
                                                  -> HRESULT>,
    pub SetCallBack: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXPRTEngine,
                                                pCB: LPD3DXSHPRTSIMCB,
                                                Frequency: FLOAT,
                                                lpUserContext: LPVOID)
                                               -> HRESULT>,
    pub ShadowRayIntersects: ::std::option::Option<extern "C" fn
                                                       (This:
                                                            *mut ID3DXPRTEngine,
                                                        pRayPos:
                                                            *const D3DXVECTOR3,
                                                        pRayDir:
                                                            *const D3DXVECTOR3)
                                                       -> BOOL>,
    pub ClosestRayIntersects: ::std::option::Option<extern "C" fn
                                                        (This:
                                                             *mut ID3DXPRTEngine,
                                                         pRayPos:
                                                             *const D3DXVECTOR3,
                                                         pRayDir:
                                                             *const D3DXVECTOR3,
                                                         pFaceIndex:
                                                             *mut DWORD,
                                                         pU: *mut FLOAT,
                                                         pV: *mut FLOAT,
                                                         pDist: *mut FLOAT)
                                                        -> BOOL>,
}
impl ::std::default::Default for Struct_ID3DXPRTEngineVtbl {
    fn default() -> Struct_ID3DXPRTEngineVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__XFILECOMPRESSEDANIMATIONSET {
    pub CompressedBlockSize: DWORD,
    pub TicksPerSec: FLOAT,
    pub PlaybackType: DWORD,
    pub BufferLength: DWORD,
}
impl ::std::default::Default for Struct__XFILECOMPRESSEDANIMATIONSET {
    fn default() -> Struct__XFILECOMPRESSEDANIMATIONSET {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type XFILECOMPRESSEDANIMATIONSET = Struct__XFILECOMPRESSEDANIMATIONSET;
extern "C" {
    pub static IID_ID3DXBaseMesh: GUID;
    pub static IID_ID3DXMesh: GUID;
    pub static IID_ID3DXPMesh: GUID;
    pub static IID_ID3DXSPMesh: GUID;
    pub static IID_ID3DXSkinInfo: GUID;
    pub static IID_ID3DXPatchMesh: GUID;
    pub static IID_ID3DXPRTBuffer: GUID;
    pub static IID_ID3DXPRTCompBuffer: GUID;
    pub static IID_ID3DXTextureGutterHelper: GUID;
    pub static IID_ID3DXPRTEngine: GUID;
    pub static DXFILEOBJ_XSkinMeshHeader: GUID;
    pub static DXFILEOBJ_VertexDuplicationIndices: GUID;
    pub static DXFILEOBJ_FaceAdjacency: GUID;
    pub static DXFILEOBJ_SkinWeights: GUID;
    pub static DXFILEOBJ_Patch: GUID;
    pub static DXFILEOBJ_PatchMesh: GUID;
    pub static DXFILEOBJ_PatchMesh9: GUID;
    pub static DXFILEOBJ_PMInfo: GUID;
    pub static DXFILEOBJ_PMAttributeRange: GUID;
    pub static DXFILEOBJ_PMVSplitRecord: GUID;
    pub static DXFILEOBJ_FVFData: GUID;
    pub static DXFILEOBJ_VertexElement: GUID;
    pub static DXFILEOBJ_DeclData: GUID;
    pub static DXFILEOBJ_EffectFloats: GUID;
    pub static DXFILEOBJ_EffectString: GUID;
    pub static DXFILEOBJ_EffectDWord: GUID;
    pub static DXFILEOBJ_EffectParamFloats: GUID;
    pub static DXFILEOBJ_EffectParamString: GUID;
    pub static DXFILEOBJ_EffectParamDWord: GUID;
    pub static DXFILEOBJ_EffectInstance: GUID;
    pub static DXFILEOBJ_AnimTicksPerSecond: GUID;
    pub static DXFILEOBJ_CompressedAnimationSet: GUID;
}
extern "C" {
    pub fn D3DXCreateMesh(NumFaces: DWORD, NumVertices: DWORD, Options: DWORD,
                          pDeclaration: *const D3DVERTEXELEMENT9,
                          pD3DDevice: LPDIRECT3DDEVICE9,
                          ppMesh: *mut LPD3DXMESH) -> HRESULT;
    pub fn D3DXCreateMeshFVF(NumFaces: DWORD, NumVertices: DWORD,
                             Options: DWORD, FVF: DWORD,
                             pD3DDevice: LPDIRECT3DDEVICE9,
                             ppMesh: *mut LPD3DXMESH) -> HRESULT;
    pub fn D3DXCreateSPMesh(pMesh: LPD3DXMESH, pAdjacency: *const DWORD,
                            pVertexAttributeWeights:
                                *const D3DXATTRIBUTEWEIGHTS,
                            pVertexWeights: *const FLOAT,
                            ppSMesh: *mut LPD3DXSPMESH) -> HRESULT;
    pub fn D3DXCleanMesh(CleanType: D3DXCLEANTYPE, pMeshIn: LPD3DXMESH,
                         pAdjacencyIn: *const DWORD,
                         ppMeshOut: *mut LPD3DXMESH,
                         pAdjacencyOut: *mut DWORD,
                         ppErrorsAndWarnings: *mut LPD3DXBUFFER) -> HRESULT;
    pub fn D3DXValidMesh(pMeshIn: LPD3DXMESH, pAdjacency: *const DWORD,
                         ppErrorsAndWarnings: *mut LPD3DXBUFFER) -> HRESULT;
    pub fn D3DXGeneratePMesh(pMesh: LPD3DXMESH, pAdjacency: *const DWORD,
                             pVertexAttributeWeights:
                                 *const D3DXATTRIBUTEWEIGHTS,
                             pVertexWeights: *const FLOAT, MinValue: DWORD,
                             Options: DWORD, ppPMesh: *mut LPD3DXPMESH)
     -> HRESULT;
    pub fn D3DXSimplifyMesh(pMesh: LPD3DXMESH, pAdjacency: *const DWORD,
                            pVertexAttributeWeights:
                                *const D3DXATTRIBUTEWEIGHTS,
                            pVertexWeights: *const FLOAT, MinValue: DWORD,
                            Options: DWORD, ppMesh: *mut LPD3DXMESH)
     -> HRESULT;
    pub fn D3DXComputeBoundingSphere(pFirstPosition: *const D3DXVECTOR3,
                                     NumVertices: DWORD, dwStride: DWORD,
                                     pCenter: *mut D3DXVECTOR3,
                                     pRadius: *mut FLOAT) -> HRESULT;
    pub fn D3DXComputeBoundingBox(pFirstPosition: *const D3DXVECTOR3,
                                  NumVertices: DWORD, dwStride: DWORD,
                                  pMin: *mut D3DXVECTOR3,
                                  pMax: *mut D3DXVECTOR3) -> HRESULT;
    pub fn D3DXComputeNormals(pMesh: LPD3DXBASEMESH, pAdjacency: *const DWORD)
     -> HRESULT;
    pub fn D3DXCreateBuffer(NumBytes: DWORD, ppBuffer: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXLoadMeshFromXA(pFilename: LPCSTR, Options: DWORD,
                              pD3DDevice: LPDIRECT3DDEVICE9,
                              ppAdjacency: *mut LPD3DXBUFFER,
                              ppMaterials: *mut LPD3DXBUFFER,
                              ppEffectInstances: *mut LPD3DXBUFFER,
                              pNumMaterials: *mut DWORD,
                              ppMesh: *mut LPD3DXMESH) -> HRESULT;
    pub fn D3DXLoadMeshFromXW(pFilename: LPCWSTR, Options: DWORD,
                              pD3DDevice: LPDIRECT3DDEVICE9,
                              ppAdjacency: *mut LPD3DXBUFFER,
                              ppMaterials: *mut LPD3DXBUFFER,
                              ppEffectInstances: *mut LPD3DXBUFFER,
                              pNumMaterials: *mut DWORD,
                              ppMesh: *mut LPD3DXMESH) -> HRESULT;
    pub fn D3DXLoadMeshFromXInMemory(Memory: LPCVOID, SizeOfMemory: DWORD,
                                     Options: DWORD,
                                     pD3DDevice: LPDIRECT3DDEVICE9,
                                     ppAdjacency: *mut LPD3DXBUFFER,
                                     ppMaterials: *mut LPD3DXBUFFER,
                                     ppEffectInstances: *mut LPD3DXBUFFER,
                                     pNumMaterials: *mut DWORD,
                                     ppMesh: *mut LPD3DXMESH) -> HRESULT;
    pub fn D3DXLoadMeshFromXResource(Module: HMODULE, Name: LPCSTR,
                                     Type: LPCSTR, Options: DWORD,
                                     pD3DDevice: LPDIRECT3DDEVICE9,
                                     ppAdjacency: *mut LPD3DXBUFFER,
                                     ppMaterials: *mut LPD3DXBUFFER,
                                     ppEffectInstances: *mut LPD3DXBUFFER,
                                     pNumMaterials: *mut DWORD,
                                     ppMesh: *mut LPD3DXMESH) -> HRESULT;
    pub fn D3DXSaveMeshToXA(pFilename: LPCSTR, pMesh: LPD3DXMESH,
                            pAdjacency: *const DWORD,
                            pMaterials: *const D3DXMATERIAL,
                            pEffectInstances: *const D3DXEFFECTINSTANCE,
                            NumMaterials: DWORD, Format: DWORD) -> HRESULT;
    pub fn D3DXSaveMeshToXW(pFilename: LPCWSTR, pMesh: LPD3DXMESH,
                            pAdjacency: *const DWORD,
                            pMaterials: *const D3DXMATERIAL,
                            pEffectInstances: *const D3DXEFFECTINSTANCE,
                            NumMaterials: DWORD, Format: DWORD) -> HRESULT;
    pub fn D3DXCreatePMeshFromStream(pStream: *mut IStream, Options: DWORD,
                                     pD3DDevice: LPDIRECT3DDEVICE9,
                                     ppMaterials: *mut LPD3DXBUFFER,
                                     ppEffectInstances: *mut LPD3DXBUFFER,
                                     pNumMaterials: *mut DWORD,
                                     ppPMesh: *mut LPD3DXPMESH) -> HRESULT;
    pub fn D3DXCreateSkinInfo(NumVertices: DWORD,
                              pDeclaration: *const D3DVERTEXELEMENT9,
                              NumBones: DWORD,
                              ppSkinInfo: *mut LPD3DXSKININFO) -> HRESULT;
    pub fn D3DXCreateSkinInfoFVF(NumVertices: DWORD, FVF: DWORD,
                                 NumBones: DWORD,
                                 ppSkinInfo: *mut LPD3DXSKININFO) -> HRESULT;
    pub fn D3DXLoadMeshFromXof(pxofMesh: LPD3DXFILEDATA, Options: DWORD,
                               pD3DDevice: LPDIRECT3DDEVICE9,
                               ppAdjacency: *mut LPD3DXBUFFER,
                               ppMaterials: *mut LPD3DXBUFFER,
                               ppEffectInstances: *mut LPD3DXBUFFER,
                               pNumMaterials: *mut DWORD,
                               ppMesh: *mut LPD3DXMESH) -> HRESULT;
    pub fn D3DXLoadSkinMeshFromXof(pxofMesh: LPD3DXFILEDATA, Options: DWORD,
                                   pD3DDevice: LPDIRECT3DDEVICE9,
                                   ppAdjacency: *mut LPD3DXBUFFER,
                                   ppMaterials: *mut LPD3DXBUFFER,
                                   ppEffectInstances: *mut LPD3DXBUFFER,
                                   pMatOut: *mut DWORD,
                                   ppSkinInfo: *mut LPD3DXSKININFO,
                                   ppMesh: *mut LPD3DXMESH) -> HRESULT;
    pub fn D3DXCreateSkinInfoFromBlendedMesh(pMesh: LPD3DXBASEMESH,
                                             NumBones: DWORD,
                                             pBoneCombinationTable:
                                                 *const D3DXBONECOMBINATION,
                                             ppSkinInfo: *mut LPD3DXSKININFO)
     -> HRESULT;
    pub fn D3DXTessellateNPatches(pMeshIn: LPD3DXMESH,
                                  pAdjacencyIn: *const DWORD, NumSegs: FLOAT,
                                  QuadraticInterpNormals: BOOL,
                                  ppMeshOut: *mut LPD3DXMESH,
                                  ppAdjacencyOut: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXGenerateOutputDecl(pOutput: *mut D3DVERTEXELEMENT9,
                                  pInput: *const D3DVERTEXELEMENT9)
     -> HRESULT;
    pub fn D3DXLoadPatchMeshFromXof(pXofObjMesh: LPD3DXFILEDATA,
                                    Options: DWORD,
                                    pD3DDevice: LPDIRECT3DDEVICE9,
                                    ppMaterials: *mut LPD3DXBUFFER,
                                    ppEffectInstances: *mut LPD3DXBUFFER,
                                    pNumMaterials: PDWORD,
                                    ppMesh: *mut LPD3DXPATCHMESH) -> HRESULT;
    pub fn D3DXRectPatchSize(pfNumSegs: *const FLOAT,
                             pdwTriangles: *mut DWORD,
                             pdwVertices: *mut DWORD) -> HRESULT;
    pub fn D3DXTriPatchSize(pfNumSegs: *const FLOAT, pdwTriangles: *mut DWORD,
                            pdwVertices: *mut DWORD) -> HRESULT;
    pub fn D3DXTessellateRectPatch(pVB: LPDIRECT3DVERTEXBUFFER9,
                                   pNumSegs: *const FLOAT,
                                   pdwInDecl: *const D3DVERTEXELEMENT9,
                                   pRectPatchInfo: *const D3DRECTPATCH_INFO,
                                   pMesh: LPD3DXMESH) -> HRESULT;
    pub fn D3DXTessellateTriPatch(pVB: LPDIRECT3DVERTEXBUFFER9,
                                  pNumSegs: *const FLOAT,
                                  pInDecl: *const D3DVERTEXELEMENT9,
                                  pTriPatchInfo: *const D3DTRIPATCH_INFO,
                                  pMesh: LPD3DXMESH) -> HRESULT;
    pub fn D3DXCreateNPatchMesh(pMeshSysMem: LPD3DXMESH,
                                pPatchMesh: *mut LPD3DXPATCHMESH) -> HRESULT;
    pub fn D3DXCreatePatchMesh(pInfo: *const D3DXPATCHINFO,
                               dwNumPatches: DWORD, dwNumVertices: DWORD,
                               dwOptions: DWORD,
                               pDecl: *const D3DVERTEXELEMENT9,
                               pD3DDevice: LPDIRECT3DDEVICE9,
                               pPatchMesh: *mut LPD3DXPATCHMESH) -> HRESULT;
    pub fn D3DXValidPatchMesh(pMesh: LPD3DXPATCHMESH,
                              dwcDegenerateVertices: *mut DWORD,
                              dwcDegeneratePatches: *mut DWORD,
                              ppErrorsAndWarnings: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXGetFVFVertexSize(FVF: DWORD) -> UINT;
    pub fn D3DXGetDeclVertexSize(pDecl: *const D3DVERTEXELEMENT9,
                                 Stream: DWORD) -> UINT;
    pub fn D3DXGetDeclLength(pDecl: *const D3DVERTEXELEMENT9) -> UINT;
    pub fn D3DXDeclaratorFromFVF(FVF: DWORD,
                                 pDeclarator: *mut D3DVERTEXELEMENT9)
     -> HRESULT;
    pub fn D3DXFVFFromDeclarator(pDeclarator: *const D3DVERTEXELEMENT9,
                                 pFVF: *mut DWORD) -> HRESULT;
    pub fn D3DXWeldVertices(pMesh: LPD3DXMESH, Flags: DWORD,
                            pEpsilons: *const D3DXWELDEPSILONS,
                            pAdjacencyIn: *const DWORD,
                            pAdjacencyOut: *mut DWORD, pFaceRemap: *mut DWORD,
                            ppVertexRemap: *mut LPD3DXBUFFER) -> HRESULT;
    pub fn D3DXIntersect(pMesh: LPD3DXBASEMESH, pRayPos: *const D3DXVECTOR3,
                         pRayDir: *const D3DXVECTOR3, pHit: *mut BOOL,
                         pFaceIndex: *mut DWORD, pU: *mut FLOAT,
                         pV: *mut FLOAT, pDist: *mut FLOAT,
                         ppAllHits: *mut LPD3DXBUFFER,
                         pCountOfHits: *mut DWORD) -> HRESULT;
    pub fn D3DXIntersectSubset(pMesh: LPD3DXBASEMESH, AttribId: DWORD,
                               pRayPos: *const D3DXVECTOR3,
                               pRayDir: *const D3DXVECTOR3, pHit: *mut BOOL,
                               pFaceIndex: *mut DWORD, pU: *mut FLOAT,
                               pV: *mut FLOAT, pDist: *mut FLOAT,
                               ppAllHits: *mut LPD3DXBUFFER,
                               pCountOfHits: *mut DWORD) -> HRESULT;
    pub fn D3DXSplitMesh(pMeshIn: LPD3DXMESH, pAdjacencyIn: *const DWORD,
                         MaxSize: DWORD, Options: DWORD,
                         pMeshesOut: *mut DWORD,
                         ppMeshArrayOut: *mut LPD3DXBUFFER,
                         ppAdjacencyArrayOut: *mut LPD3DXBUFFER,
                         ppFaceRemapArrayOut: *mut LPD3DXBUFFER,
                         ppVertRemapArrayOut: *mut LPD3DXBUFFER) -> HRESULT;
    pub fn D3DXIntersectTri(p0: *const D3DXVECTOR3, p1: *const D3DXVECTOR3,
                            p2: *const D3DXVECTOR3,
                            pRayPos: *const D3DXVECTOR3,
                            pRayDir: *const D3DXVECTOR3, pU: *mut FLOAT,
                            pV: *mut FLOAT, pDist: *mut FLOAT) -> BOOL;
    pub fn D3DXSphereBoundProbe(pCenter: *const D3DXVECTOR3, Radius: FLOAT,
                                pRayPosition: *const D3DXVECTOR3,
                                pRayDirection: *const D3DXVECTOR3) -> BOOL;
    pub fn D3DXBoxBoundProbe(pMin: *const D3DXVECTOR3,
                             pMax: *const D3DXVECTOR3,
                             pRayPosition: *const D3DXVECTOR3,
                             pRayDirection: *const D3DXVECTOR3) -> BOOL;
    pub fn D3DXComputeTangentFrame(pMesh: *mut ID3DXMesh, dwOptions: DWORD)
     -> HRESULT;
    pub fn D3DXComputeTangentFrameEx(pMesh: *mut ID3DXMesh,
                                     dwTextureInSemantic: DWORD,
                                     dwTextureInIndex: DWORD,
                                     dwUPartialOutSemantic: DWORD,
                                     dwUPartialOutIndex: DWORD,
                                     dwVPartialOutSemantic: DWORD,
                                     dwVPartialOutIndex: DWORD,
                                     dwNormalOutSemantic: DWORD,
                                     dwNormalOutIndex: DWORD,
                                     dwOptions: DWORD,
                                     pdwAdjacency: *const DWORD,
                                     fPartialEdgeThreshold: FLOAT,
                                     fSingularPointThreshold: FLOAT,
                                     fNormalEdgeThreshold: FLOAT,
                                     ppMeshOut: *mut *mut ID3DXMesh,
                                     ppVertexMapping: *mut *mut ID3DXBuffer)
     -> HRESULT;
    pub fn D3DXComputeTangent(Mesh: LPD3DXMESH, TexStage: DWORD,
                              TangentIndex: DWORD, BinormIndex: DWORD,
                              Wrap: DWORD, pAdjacency: *const DWORD)
     -> HRESULT;
    pub fn D3DXUVAtlasCreate(pMesh: LPD3DXMESH, uMaxChartNumber: UINT,
                             fMaxStretch: FLOAT, uWidth: UINT, uHeight: UINT,
                             fGutter: FLOAT, dwTextureIndex: DWORD,
                             pdwAdjacency: *const DWORD,
                             pdwFalseEdgeAdjacency: *const DWORD,
                             pfIMTArray: *const FLOAT,
                             pStatusCallback: LPD3DXUVATLASCB,
                             fCallbackFrequency: FLOAT, pUserContext: LPVOID,
                             dwOptions: DWORD, ppMeshOut: *mut LPD3DXMESH,
                             ppFacePartitioning: *mut LPD3DXBUFFER,
                             ppVertexRemapArray: *mut LPD3DXBUFFER,
                             pfMaxStretchOut: *mut FLOAT,
                             puNumChartsOut: *mut UINT) -> HRESULT;
    pub fn D3DXUVAtlasPartition(pMesh: LPD3DXMESH, uMaxChartNumber: UINT,
                                fMaxStretch: FLOAT, dwTextureIndex: DWORD,
                                pdwAdjacency: *const DWORD,
                                pdwFalseEdgeAdjacency: *const DWORD,
                                pfIMTArray: *const FLOAT,
                                pStatusCallback: LPD3DXUVATLASCB,
                                fCallbackFrequency: FLOAT,
                                pUserContext: LPVOID, dwOptions: DWORD,
                                ppMeshOut: *mut LPD3DXMESH,
                                ppFacePartitioning: *mut LPD3DXBUFFER,
                                ppVertexRemapArray: *mut LPD3DXBUFFER,
                                ppPartitionResultAdjacency: *mut LPD3DXBUFFER,
                                pfMaxStretchOut: *mut FLOAT,
                                puNumChartsOut: *mut UINT) -> HRESULT;
    pub fn D3DXUVAtlasPack(pMesh: *mut ID3DXMesh, uWidth: UINT, uHeight: UINT,
                           fGutter: FLOAT, dwTextureIndex: DWORD,
                           pdwPartitionResultAdjacency: *const DWORD,
                           pStatusCallback: LPD3DXUVATLASCB,
                           fCallbackFrequency: FLOAT, pUserContext: LPVOID,
                           dwOptions: DWORD, pFacePartitioning: LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXComputeIMTFromPerVertexSignal(pMesh: LPD3DXMESH,
                                             pfVertexSignal: *const FLOAT,
                                             uSignalDimension: UINT,
                                             uSignalStride: UINT,
                                             dwOptions: DWORD,
                                             pStatusCallback: LPD3DXUVATLASCB,
                                             pUserContext: LPVOID,
                                             ppIMTData: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXComputeIMTFromSignal(pMesh: LPD3DXMESH, dwTextureIndex: DWORD,
                                    uSignalDimension: UINT,
                                    fMaxUVDistance: FLOAT, dwOptions: DWORD,
                                    pSignalCallback: LPD3DXIMTSIGNALCALLBACK,
                                    pUserData: *mut ::libc::c_void,
                                    pStatusCallback: LPD3DXUVATLASCB,
                                    pUserContext: LPVOID,
                                    ppIMTData: *mut LPD3DXBUFFER) -> HRESULT;
    pub fn D3DXComputeIMTFromTexture(pMesh: LPD3DXMESH,
                                     pTexture: LPDIRECT3DTEXTURE9,
                                     dwTextureIndex: DWORD, dwOptions: DWORD,
                                     pStatusCallback: LPD3DXUVATLASCB,
                                     pUserContext: LPVOID,
                                     ppIMTData: *mut LPD3DXBUFFER) -> HRESULT;
    pub fn D3DXComputeIMTFromPerTexelSignal(pMesh: LPD3DXMESH,
                                            dwTextureIndex: DWORD,
                                            pfTexelSignal: *mut FLOAT,
                                            uWidth: UINT, uHeight: UINT,
                                            uSignalDimension: UINT,
                                            uComponents: UINT,
                                            dwOptions: DWORD,
                                            pStatusCallback: LPD3DXUVATLASCB,
                                            pUserContext: LPVOID,
                                            ppIMTData: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXConvertMeshSubsetToSingleStrip(MeshIn: LPD3DXBASEMESH,
                                              AttribId: DWORD,
                                              IBOptions: DWORD,
                                              ppIndexBuffer:
                                                  *mut LPDIRECT3DINDEXBUFFER9,
                                              pNumIndices: *mut DWORD)
     -> HRESULT;
    pub fn D3DXConvertMeshSubsetToStrips(MeshIn: LPD3DXBASEMESH,
                                         AttribId: DWORD, IBOptions: DWORD,
                                         ppIndexBuffer:
                                             *mut LPDIRECT3DINDEXBUFFER9,
                                         pNumIndices: *mut DWORD,
                                         ppStripLengths: *mut LPD3DXBUFFER,
                                         pNumStrips: *mut DWORD) -> HRESULT;
    pub fn D3DXOptimizeFaces(pbIndices: LPCVOID, cFaces: UINT,
                             cVertices: UINT, b32BitIndices: BOOL,
                             pFaceRemap: *mut DWORD) -> HRESULT;
    pub fn D3DXOptimizeVertices(pbIndices: LPCVOID, cFaces: UINT,
                                cVertices: UINT, b32BitIndices: BOOL,
                                pVertexRemap: *mut DWORD) -> HRESULT;
    pub fn D3DXCreatePRTBuffer(NumSamples: UINT, NumCoeffs: UINT,
                               NumChannels: UINT,
                               ppBuffer: *mut LPD3DXPRTBUFFER) -> HRESULT;
    pub fn D3DXCreatePRTBufferTex(Width: UINT, Height: UINT, NumCoeffs: UINT,
                                  NumChannels: UINT,
                                  ppBuffer: *mut LPD3DXPRTBUFFER) -> HRESULT;
    pub fn D3DXLoadPRTBufferFromFileA(pFilename: LPCSTR,
                                      ppBuffer: *mut LPD3DXPRTBUFFER)
     -> HRESULT;
    pub fn D3DXLoadPRTBufferFromFileW(pFilename: LPCWSTR,
                                      ppBuffer: *mut LPD3DXPRTBUFFER)
     -> HRESULT;
    pub fn D3DXSavePRTBufferToFileA(pFileName: LPCSTR,
                                    pBuffer: LPD3DXPRTBUFFER) -> HRESULT;
    pub fn D3DXSavePRTBufferToFileW(pFileName: LPCWSTR,
                                    pBuffer: LPD3DXPRTBUFFER) -> HRESULT;
    pub fn D3DXLoadPRTCompBufferFromFileA(pFilename: LPCSTR,
                                          ppBuffer: *mut LPD3DXPRTCOMPBUFFER)
     -> HRESULT;
    pub fn D3DXLoadPRTCompBufferFromFileW(pFilename: LPCWSTR,
                                          ppBuffer: *mut LPD3DXPRTCOMPBUFFER)
     -> HRESULT;
    pub fn D3DXSavePRTCompBufferToFileA(pFileName: LPCSTR,
                                        pBuffer: LPD3DXPRTCOMPBUFFER)
     -> HRESULT;
    pub fn D3DXSavePRTCompBufferToFileW(pFileName: LPCWSTR,
                                        pBuffer: LPD3DXPRTCOMPBUFFER)
     -> HRESULT;
    pub fn D3DXCreatePRTCompBuffer(Quality: D3DXSHCOMPRESSQUALITYTYPE,
                                   NumClusters: UINT, NumPCA: UINT,
                                   pCB: LPD3DXSHPRTSIMCB,
                                   lpUserContext: LPVOID,
                                   pBufferIn: LPD3DXPRTBUFFER,
                                   ppBufferOut: *mut LPD3DXPRTCOMPBUFFER)
     -> HRESULT;
    pub fn D3DXCreateTextureGutterHelper(Width: UINT, Height: UINT,
                                         pMesh: LPD3DXMESH, GutterSize: FLOAT,
                                         ppBuffer:
                                             *mut LPD3DXTEXTUREGUTTERHELPER)
     -> HRESULT;
    pub fn D3DXCreatePRTEngine(pMesh: LPD3DXMESH, pAdjacency: *mut DWORD,
                               ExtractUVs: BOOL, pBlockerMesh: LPD3DXMESH,
                               ppEngine: *mut LPD3DXPRTENGINE) -> HRESULT;
    pub fn D3DXConcatenateMeshes(ppMeshes: *mut LPD3DXMESH, NumMeshes: UINT,
                                 Options: DWORD,
                                 pGeomXForms: *const D3DXMATRIX,
                                 pTextureXForms: *const D3DXMATRIX,
                                 pDecl: *const D3DVERTEXELEMENT9,
                                 pD3DDevice: LPDIRECT3DDEVICE9,
                                 ppMeshOut: *mut LPD3DXMESH) -> HRESULT;
    pub fn D3DXSHPRTCompSuperCluster(pClusterIDs: *mut UINT,
                                     pScene: LPD3DXMESH, MaxNumClusters: UINT,
                                     NumClusters: UINT,
                                     pSuperClusterIDs: *mut UINT,
                                     pNumSuperClusters: *mut UINT) -> HRESULT;
    pub fn D3DXSHPRTCompSplitMeshSC(pClusterIDs: *mut UINT, NumVertices: UINT,
                                    NumClusters: UINT,
                                    pSuperClusterIDs: *mut UINT,
                                    NumSuperClusters: UINT, pInputIB: LPVOID,
                                    InputIBIs32Bit: BOOL, NumFaces: UINT,
                                    ppIBData: *mut LPD3DXBUFFER,
                                    pIBDataLength: *mut UINT,
                                    OutputIBIs32Bit: BOOL,
                                    ppFaceRemap: *mut LPD3DXBUFFER,
                                    ppVertData: *mut LPD3DXBUFFER,
                                    pVertDataLength: *mut UINT,
                                    pSCClusterList: *mut UINT,
                                    pSCData:
                                        *mut D3DXSHPRTSPLITMESHCLUSTERDATA)
     -> HRESULT;
}
