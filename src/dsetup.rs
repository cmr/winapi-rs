/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy)]
pub struct Struct__DSETUP_CB_PROGRESS {
    pub dwPhase: DWORD,
    pub dwInPhaseMaximum: DWORD,
    pub dwInPhaseProgress: DWORD,
    pub dwOverallMaximum: DWORD,
    pub dwOverallProgress: DWORD,
}
impl ::std::default::Default for Struct__DSETUP_CB_PROGRESS {
    fn default() -> Struct__DSETUP_CB_PROGRESS {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type DSETUP_CB_PROGRESS = Struct__DSETUP_CB_PROGRESS;
pub type Enum__DSETUP_CB_PROGRESS_PHASE = ::libc::c_uint;
pub const DSETUP_INITIALIZING: ::libc::c_uint = 0;
pub const DSETUP_EXTRACTING: ::libc::c_uint = 1;
pub const DSETUP_COPYING: ::libc::c_uint = 2;
pub const DSETUP_FINALIZING: ::libc::c_uint = 3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__DIRECTXREGISTERAPPA {
    pub dwSize: DWORD,
    pub dwFlags: DWORD,
    pub lpszApplicationName: LPSTR,
    pub lpGUID: LPGUID,
    pub lpszFilename: LPSTR,
    pub lpszCommandLine: LPSTR,
    pub lpszPath: LPSTR,
    pub lpszCurrentDirectory: LPSTR,
}
impl ::std::default::Default for Struct__DIRECTXREGISTERAPPA {
    fn default() -> Struct__DIRECTXREGISTERAPPA {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type DIRECTXREGISTERAPPA = Struct__DIRECTXREGISTERAPPA;
pub type PDIRECTXREGISTERAPPA = *mut Struct__DIRECTXREGISTERAPPA;
pub type LPDIRECTXREGISTERAPPA = *mut Struct__DIRECTXREGISTERAPPA;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__DIRECTXREGISTERAPP2A {
    pub dwSize: DWORD,
    pub dwFlags: DWORD,
    pub lpszApplicationName: LPSTR,
    pub lpGUID: LPGUID,
    pub lpszFilename: LPSTR,
    pub lpszCommandLine: LPSTR,
    pub lpszPath: LPSTR,
    pub lpszCurrentDirectory: LPSTR,
    pub lpszLauncherName: LPSTR,
}
impl ::std::default::Default for Struct__DIRECTXREGISTERAPP2A {
    fn default() -> Struct__DIRECTXREGISTERAPP2A {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type DIRECTXREGISTERAPP2A = Struct__DIRECTXREGISTERAPP2A;
pub type PDIRECTXREGISTERAPP2A = *mut Struct__DIRECTXREGISTERAPP2A;
pub type LPDIRECTXREGISTERAPP2A = *mut Struct__DIRECTXREGISTERAPP2A;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__DIRECTXREGISTERAPPW {
    pub dwSize: DWORD,
    pub dwFlags: DWORD,
    pub lpszApplicationName: LPWSTR,
    pub lpGUID: LPGUID,
    pub lpszFilename: LPWSTR,
    pub lpszCommandLine: LPWSTR,
    pub lpszPath: LPWSTR,
    pub lpszCurrentDirectory: LPWSTR,
}
impl ::std::default::Default for Struct__DIRECTXREGISTERAPPW {
    fn default() -> Struct__DIRECTXREGISTERAPPW {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type DIRECTXREGISTERAPPW = Struct__DIRECTXREGISTERAPPW;
pub type PDIRECTXREGISTERAPPW = *mut Struct__DIRECTXREGISTERAPPW;
pub type LPDIRECTXREGISTERAPPW = *mut Struct__DIRECTXREGISTERAPPW;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__DIRECTXREGISTERAPP2W {
    pub dwSize: DWORD,
    pub dwFlags: DWORD,
    pub lpszApplicationName: LPWSTR,
    pub lpGUID: LPGUID,
    pub lpszFilename: LPWSTR,
    pub lpszCommandLine: LPWSTR,
    pub lpszPath: LPWSTR,
    pub lpszCurrentDirectory: LPWSTR,
    pub lpszLauncherName: LPWSTR,
}
impl ::std::default::Default for Struct__DIRECTXREGISTERAPP2W {
    fn default() -> Struct__DIRECTXREGISTERAPP2W {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type DIRECTXREGISTERAPP2W = Struct__DIRECTXREGISTERAPP2W;
pub type PDIRECTXREGISTERAPP2W = *mut Struct__DIRECTXREGISTERAPP2W;
pub type LPDIRECTXREGISTERAPP2W = *mut Struct__DIRECTXREGISTERAPP2W;
pub type DIRECTXREGISTERAPP = DIRECTXREGISTERAPPA;
pub type PDIRECTXREGISTERAPP = PDIRECTXREGISTERAPPA;
pub type LPDIRECTXREGISTERAPP = LPDIRECTXREGISTERAPPA;
pub type DIRECTXREGISTERAPP2 = DIRECTXREGISTERAPP2A;
pub type PDIRECTXREGISTERAPP2 = PDIRECTXREGISTERAPP2A;
pub type LPDIRECTXREGISTERAPP2 = LPDIRECTXREGISTERAPP2A;
pub type LPDIRECTXSETUP =
    ::std::option::Option<extern "C" fn(arg1: HWND, arg2: LPSTR, arg3: DWORD)
                              -> INT>;
pub type LPDIRECTXREGISTERAPPLICATION =
    ::std::option::Option<extern "C" fn(arg1: HWND, arg2: LPVOID) -> INT>;
pub type DSETUP_CALLBACK =
    ::std::option::Option<extern "C" fn
                              (Reason: DWORD, MsgType: DWORD,
                               szMessage: LPSTR, szName: LPSTR,
                               pInfo: *mut ::libc::c_void) -> DWORD>;
pub type LPDIRECTXSETUPGETEULA =
    ::std::option::Option<extern "C" fn(arg1: LPSTR, arg2: UINT, arg3: WORD)
                              -> UINT>;
extern "C" {
    pub fn DirectXSetupA(hWnd: HWND, lpszRootPath: LPSTR, dwFlags: DWORD)
     -> INT;
    pub fn DirectXSetupW(hWnd: HWND, lpszRootPath: LPWSTR, dwFlags: DWORD)
     -> INT;
    pub fn DirectXRegisterApplicationA(hWnd: HWND, lpDXRegApp: LPVOID) -> INT;
    pub fn DirectXRegisterApplicationW(hWnd: HWND, lpDXRegApp: LPVOID) -> INT;
    pub fn DirectXUnRegisterApplication(hWnd: HWND, lpGUID: LPGUID) -> INT;
    pub fn DirectXSetupSetCallback(Callback: DSETUP_CALLBACK) -> INT;
    pub fn DirectXSetupGetVersion(lpdwVersion: *mut DWORD,
                                  lpdwMinorVersion: *mut DWORD) -> INT;
    pub fn DirectXSetupShowEULA(hWndParent: HWND) -> INT;
    pub fn DirectXSetupGetEULAA(lpszEULA: LPSTR, cchEULA: UINT, LangID: WORD)
     -> UINT;
    pub fn DirectXSetupGetEULAW(lpszEULA: LPWSTR, cchEULA: UINT, LangID: WORD)
     -> UINT;
}
