/* automatically generated by rust-bindgen */

pub type D3DXHANDLE = LPCSTR;
pub type LPD3DXHANDLE = *mut D3DXHANDLE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXMACRO {
    pub Name: LPCSTR,
    pub Definition: LPCSTR,
}
impl ::std::default::Default for Struct__D3DXMACRO {
    fn default() -> Struct__D3DXMACRO { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXMACRO = Struct__D3DXMACRO;
pub type LPD3DXMACRO = *mut Struct__D3DXMACRO;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXSEMANTIC {
    pub Usage: UINT,
    pub UsageIndex: UINT,
}
impl ::std::default::Default for Struct__D3DXSEMANTIC {
    fn default() -> Struct__D3DXSEMANTIC { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXSEMANTIC = Struct__D3DXSEMANTIC;
pub type LPD3DXSEMANTIC = *mut Struct__D3DXSEMANTIC;
pub type Enum__D3DXREGISTER_SET = ::libc::c_uint;
pub const D3DXRS_BOOL: ::libc::c_uint = 0;
pub const D3DXRS_INT4: ::libc::c_uint = 1;
pub const D3DXRS_FLOAT4: ::libc::c_uint = 2;
pub const D3DXRS_SAMPLER: ::libc::c_uint = 3;
pub const D3DXRS_FORCE_DWORD: ::libc::c_uint = 2147483647;
pub type D3DXREGISTER_SET = Enum__D3DXREGISTER_SET;
pub type LPD3DXREGISTER_SET = *mut Enum__D3DXREGISTER_SET;
pub type Enum__D3DXPARAMETER_CLASS = ::libc::c_uint;
pub const D3DXPC_SCALAR: ::libc::c_uint = 0;
pub const D3DXPC_VECTOR: ::libc::c_uint = 1;
pub const D3DXPC_MATRIX_ROWS: ::libc::c_uint = 2;
pub const D3DXPC_MATRIX_COLUMNS: ::libc::c_uint = 3;
pub const D3DXPC_OBJECT: ::libc::c_uint = 4;
pub const D3DXPC_STRUCT: ::libc::c_uint = 5;
pub const D3DXPC_FORCE_DWORD: ::libc::c_uint = 2147483647;
pub type D3DXPARAMETER_CLASS = Enum__D3DXPARAMETER_CLASS;
pub type LPD3DXPARAMETER_CLASS = *mut Enum__D3DXPARAMETER_CLASS;
pub type Enum__D3DXPARAMETER_TYPE = ::libc::c_uint;
pub const D3DXPT_VOID: ::libc::c_uint = 0;
pub const D3DXPT_BOOL: ::libc::c_uint = 1;
pub const D3DXPT_INT: ::libc::c_uint = 2;
pub const D3DXPT_FLOAT: ::libc::c_uint = 3;
pub const D3DXPT_STRING: ::libc::c_uint = 4;
pub const D3DXPT_TEXTURE: ::libc::c_uint = 5;
pub const D3DXPT_TEXTURE1D: ::libc::c_uint = 6;
pub const D3DXPT_TEXTURE2D: ::libc::c_uint = 7;
pub const D3DXPT_TEXTURE3D: ::libc::c_uint = 8;
pub const D3DXPT_TEXTURECUBE: ::libc::c_uint = 9;
pub const D3DXPT_SAMPLER: ::libc::c_uint = 10;
pub const D3DXPT_SAMPLER1D: ::libc::c_uint = 11;
pub const D3DXPT_SAMPLER2D: ::libc::c_uint = 12;
pub const D3DXPT_SAMPLER3D: ::libc::c_uint = 13;
pub const D3DXPT_SAMPLERCUBE: ::libc::c_uint = 14;
pub const D3DXPT_PIXELSHADER: ::libc::c_uint = 15;
pub const D3DXPT_VERTEXSHADER: ::libc::c_uint = 16;
pub const D3DXPT_PIXELFRAGMENT: ::libc::c_uint = 17;
pub const D3DXPT_VERTEXFRAGMENT: ::libc::c_uint = 18;
pub const D3DXPT_UNSUPPORTED: ::libc::c_uint = 19;
pub const D3DXPT_FORCE_DWORD: ::libc::c_uint = 2147483647;
pub type D3DXPARAMETER_TYPE = Enum__D3DXPARAMETER_TYPE;
pub type LPD3DXPARAMETER_TYPE = *mut Enum__D3DXPARAMETER_TYPE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXCONSTANTTABLE_DESC {
    pub Creator: LPCSTR,
    pub Version: DWORD,
    pub Constants: UINT,
}
impl ::std::default::Default for Struct__D3DXCONSTANTTABLE_DESC {
    fn default() -> Struct__D3DXCONSTANTTABLE_DESC {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXCONSTANTTABLE_DESC = Struct__D3DXCONSTANTTABLE_DESC;
pub type LPD3DXCONSTANTTABLE_DESC = *mut Struct__D3DXCONSTANTTABLE_DESC;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXCONSTANT_DESC {
    pub Name: LPCSTR,
    pub RegisterSet: D3DXREGISTER_SET,
    pub RegisterIndex: UINT,
    pub RegisterCount: UINT,
    pub Class: D3DXPARAMETER_CLASS,
    pub Type: D3DXPARAMETER_TYPE,
    pub Rows: UINT,
    pub Columns: UINT,
    pub Elements: UINT,
    pub StructMembers: UINT,
    pub Bytes: UINT,
    pub DefaultValue: LPCVOID,
}
impl ::std::default::Default for Struct__D3DXCONSTANT_DESC {
    fn default() -> Struct__D3DXCONSTANT_DESC {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXCONSTANT_DESC = Struct__D3DXCONSTANT_DESC;
pub type LPD3DXCONSTANT_DESC = *mut Struct__D3DXCONSTANT_DESC;
pub type ID3DXConstantTable = Struct_ID3DXConstantTable;
pub type LPD3DXCONSTANTTABLE = *mut Struct_ID3DXConstantTable;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXConstantTable {
    pub lpVtbl: *mut Struct_ID3DXConstantTableVtbl,
}
impl ::std::default::Default for Struct_ID3DXConstantTable {
    fn default() -> Struct_ID3DXConstantTable {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ID3DXConstantTableVtbl = Struct_ID3DXConstantTableVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXConstantTableVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXConstantTable,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn
                                          (This: *mut ID3DXConstantTable)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXConstantTable)
                                           -> ULONG>,
    pub GetBufferPointer: ::std::option::Option<extern "C" fn
                                                    (This:
                                                         *mut ID3DXConstantTable)
                                                    -> LPVOID>,
    pub GetBufferSize: ::std::option::Option<extern "C" fn
                                                 (This:
                                                      *mut ID3DXConstantTable)
                                                 -> DWORD>,
    pub GetDesc: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXConstantTable,
                                            pDesc:
                                                *mut D3DXCONSTANTTABLE_DESC)
                                           -> HRESULT>,
    pub GetConstantDesc: ::std::option::Option<extern "C" fn
                                                   (This:
                                                        *mut ID3DXConstantTable,
                                                    hConstant: D3DXHANDLE,
                                                    pConstantDesc:
                                                        *mut D3DXCONSTANT_DESC,
                                                    pCount: *mut UINT)
                                                   -> HRESULT>,
    pub GetSamplerIndex: ::std::option::Option<extern "C" fn
                                                   (This:
                                                        *mut ID3DXConstantTable,
                                                    hConstant: D3DXHANDLE)
                                                   -> UINT>,
    pub GetConstant: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXConstantTable,
                                                hConstant: D3DXHANDLE,
                                                Index: UINT) -> D3DXHANDLE>,
    pub GetConstantByName: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXConstantTable,
                                                      hConstant: D3DXHANDLE,
                                                      pName: LPCSTR)
                                                     -> D3DXHANDLE>,
    pub GetConstantElement: ::std::option::Option<extern "C" fn
                                                      (This:
                                                           *mut ID3DXConstantTable,
                                                       hConstant: D3DXHANDLE,
                                                       Index: UINT)
                                                      -> D3DXHANDLE>,
    pub SetDefaults: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXConstantTable,
                                                pDevice: LPDIRECT3DDEVICE9)
                                               -> HRESULT>,
    pub SetValue: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXConstantTable,
                                             pDevice: LPDIRECT3DDEVICE9,
                                             hConstant: D3DXHANDLE,
                                             pData: LPCVOID, Bytes: UINT)
                                            -> HRESULT>,
    pub SetBool: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXConstantTable,
                                            pDevice: LPDIRECT3DDEVICE9,
                                            hConstant: D3DXHANDLE, b: BOOL)
                                           -> HRESULT>,
    pub SetBoolArray: ::std::option::Option<extern "C" fn
                                                (This:
                                                     *mut ID3DXConstantTable,
                                                 pDevice: LPDIRECT3DDEVICE9,
                                                 hConstant: D3DXHANDLE,
                                                 pb: *const BOOL, Count: UINT)
                                                -> HRESULT>,
    pub SetInt: ::std::option::Option<extern "C" fn
                                          (This: *mut ID3DXConstantTable,
                                           pDevice: LPDIRECT3DDEVICE9,
                                           hConstant: D3DXHANDLE, n: INT)
                                          -> HRESULT>,
    pub SetIntArray: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXConstantTable,
                                                pDevice: LPDIRECT3DDEVICE9,
                                                hConstant: D3DXHANDLE,
                                                pn: *const INT, Count: UINT)
                                               -> HRESULT>,
    pub SetFloat: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXConstantTable,
                                             pDevice: LPDIRECT3DDEVICE9,
                                             hConstant: D3DXHANDLE, f: FLOAT)
                                            -> HRESULT>,
    pub SetFloatArray: ::std::option::Option<extern "C" fn
                                                 (This:
                                                      *mut ID3DXConstantTable,
                                                  pDevice: LPDIRECT3DDEVICE9,
                                                  hConstant: D3DXHANDLE,
                                                  pf: *const FLOAT,
                                                  Count: UINT) -> HRESULT>,
    pub SetVector: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXConstantTable,
                                              pDevice: LPDIRECT3DDEVICE9,
                                              hConstant: D3DXHANDLE,
                                              pVector: *const D3DXVECTOR4)
                                             -> HRESULT>,
    pub SetVectorArray: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXConstantTable,
                                                   pDevice: LPDIRECT3DDEVICE9,
                                                   hConstant: D3DXHANDLE,
                                                   pVector:
                                                       *const D3DXVECTOR4,
                                                   Count: UINT) -> HRESULT>,
    pub SetMatrix: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXConstantTable,
                                              pDevice: LPDIRECT3DDEVICE9,
                                              hConstant: D3DXHANDLE,
                                              pMatrix: *const D3DXMATRIX)
                                             -> HRESULT>,
    pub SetMatrixArray: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXConstantTable,
                                                   pDevice: LPDIRECT3DDEVICE9,
                                                   hConstant: D3DXHANDLE,
                                                   pMatrix: *const D3DXMATRIX,
                                                   Count: UINT) -> HRESULT>,
    pub SetMatrixPointerArray: ::std::option::Option<extern "C" fn
                                                         (This:
                                                              *mut ID3DXConstantTable,
                                                          pDevice:
                                                              LPDIRECT3DDEVICE9,
                                                          hConstant:
                                                              D3DXHANDLE,
                                                          ppMatrix:
                                                              *mut *const D3DXMATRIX,
                                                          Count: UINT)
                                                         -> HRESULT>,
    pub SetMatrixTranspose: ::std::option::Option<extern "C" fn
                                                      (This:
                                                           *mut ID3DXConstantTable,
                                                       pDevice:
                                                           LPDIRECT3DDEVICE9,
                                                       hConstant: D3DXHANDLE,
                                                       pMatrix:
                                                           *const D3DXMATRIX)
                                                      -> HRESULT>,
    pub SetMatrixTransposeArray: ::std::option::Option<extern "C" fn
                                                           (This:
                                                                *mut ID3DXConstantTable,
                                                            pDevice:
                                                                LPDIRECT3DDEVICE9,
                                                            hConstant:
                                                                D3DXHANDLE,
                                                            pMatrix:
                                                                *const D3DXMATRIX,
                                                            Count: UINT)
                                                           -> HRESULT>,
    pub SetMatrixTransposePointerArray: ::std::option::Option<extern "C" fn
                                                                  (This:
                                                                       *mut ID3DXConstantTable,
                                                                   pDevice:
                                                                       LPDIRECT3DDEVICE9,
                                                                   hConstant:
                                                                       D3DXHANDLE,
                                                                   ppMatrix:
                                                                       *mut *const D3DXMATRIX,
                                                                   Count:
                                                                       UINT)
                                                                  -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXConstantTableVtbl {
    fn default() -> Struct_ID3DXConstantTableVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ID3DXTextureShader = Struct_ID3DXTextureShader;
pub type LPD3DXTEXTURESHADER = *mut Struct_ID3DXTextureShader;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXTextureShader {
    pub lpVtbl: *mut Struct_ID3DXTextureShaderVtbl,
}
impl ::std::default::Default for Struct_ID3DXTextureShader {
    fn default() -> Struct_ID3DXTextureShader {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ID3DXTextureShaderVtbl = Struct_ID3DXTextureShaderVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXTextureShaderVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXTextureShader,
                                                   iid: *const IID,
                                                   ppv: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn
                                          (This: *mut ID3DXTextureShader)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXTextureShader)
                                           -> ULONG>,
    pub GetFunction: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXTextureShader,
                                                ppFunction: *mut LPD3DXBUFFER)
                                               -> HRESULT>,
    pub GetConstantBuffer: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXTextureShader,
                                                      ppConstantBuffer:
                                                          *mut LPD3DXBUFFER)
                                                     -> HRESULT>,
    pub GetDesc: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXTextureShader,
                                            pDesc:
                                                *mut D3DXCONSTANTTABLE_DESC)
                                           -> HRESULT>,
    pub GetConstantDesc: ::std::option::Option<extern "C" fn
                                                   (This:
                                                        *mut ID3DXTextureShader,
                                                    hConstant: D3DXHANDLE,
                                                    pConstantDesc:
                                                        *mut D3DXCONSTANT_DESC,
                                                    pCount: *mut UINT)
                                                   -> HRESULT>,
    pub GetConstant: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXTextureShader,
                                                hConstant: D3DXHANDLE,
                                                Index: UINT) -> D3DXHANDLE>,
    pub GetConstantByName: ::std::option::Option<extern "C" fn
                                                     (This:
                                                          *mut ID3DXTextureShader,
                                                      hConstant: D3DXHANDLE,
                                                      pName: LPCSTR)
                                                     -> D3DXHANDLE>,
    pub GetConstantElement: ::std::option::Option<extern "C" fn
                                                      (This:
                                                           *mut ID3DXTextureShader,
                                                       hConstant: D3DXHANDLE,
                                                       Index: UINT)
                                                      -> D3DXHANDLE>,
    pub SetDefaults: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXTextureShader)
                                               -> HRESULT>,
    pub SetValue: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXTextureShader,
                                             hConstant: D3DXHANDLE,
                                             pData: LPCVOID, Bytes: UINT)
                                            -> HRESULT>,
    pub SetBool: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXTextureShader,
                                            hConstant: D3DXHANDLE, b: BOOL)
                                           -> HRESULT>,
    pub SetBoolArray: ::std::option::Option<extern "C" fn
                                                (This:
                                                     *mut ID3DXTextureShader,
                                                 hConstant: D3DXHANDLE,
                                                 pb: *const BOOL, Count: UINT)
                                                -> HRESULT>,
    pub SetInt: ::std::option::Option<extern "C" fn
                                          (This: *mut ID3DXTextureShader,
                                           hConstant: D3DXHANDLE, n: INT)
                                          -> HRESULT>,
    pub SetIntArray: ::std::option::Option<extern "C" fn
                                               (This: *mut ID3DXTextureShader,
                                                hConstant: D3DXHANDLE,
                                                pn: *const INT, Count: UINT)
                                               -> HRESULT>,
    pub SetFloat: ::std::option::Option<extern "C" fn
                                            (This: *mut ID3DXTextureShader,
                                             hConstant: D3DXHANDLE, f: FLOAT)
                                            -> HRESULT>,
    pub SetFloatArray: ::std::option::Option<extern "C" fn
                                                 (This:
                                                      *mut ID3DXTextureShader,
                                                  hConstant: D3DXHANDLE,
                                                  pf: *const FLOAT,
                                                  Count: UINT) -> HRESULT>,
    pub SetVector: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXTextureShader,
                                              hConstant: D3DXHANDLE,
                                              pVector: *const D3DXVECTOR4)
                                             -> HRESULT>,
    pub SetVectorArray: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXTextureShader,
                                                   hConstant: D3DXHANDLE,
                                                   pVector:
                                                       *const D3DXVECTOR4,
                                                   Count: UINT) -> HRESULT>,
    pub SetMatrix: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXTextureShader,
                                              hConstant: D3DXHANDLE,
                                              pMatrix: *const D3DXMATRIX)
                                             -> HRESULT>,
    pub SetMatrixArray: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXTextureShader,
                                                   hConstant: D3DXHANDLE,
                                                   pMatrix: *const D3DXMATRIX,
                                                   Count: UINT) -> HRESULT>,
    pub SetMatrixPointerArray: ::std::option::Option<extern "C" fn
                                                         (This:
                                                              *mut ID3DXTextureShader,
                                                          hConstant:
                                                              D3DXHANDLE,
                                                          ppMatrix:
                                                              *mut *const D3DXMATRIX,
                                                          Count: UINT)
                                                         -> HRESULT>,
    pub SetMatrixTranspose: ::std::option::Option<extern "C" fn
                                                      (This:
                                                           *mut ID3DXTextureShader,
                                                       hConstant: D3DXHANDLE,
                                                       pMatrix:
                                                           *const D3DXMATRIX)
                                                      -> HRESULT>,
    pub SetMatrixTransposeArray: ::std::option::Option<extern "C" fn
                                                           (This:
                                                                *mut ID3DXTextureShader,
                                                            hConstant:
                                                                D3DXHANDLE,
                                                            pMatrix:
                                                                *const D3DXMATRIX,
                                                            Count: UINT)
                                                           -> HRESULT>,
    pub SetMatrixTransposePointerArray: ::std::option::Option<extern "C" fn
                                                                  (This:
                                                                       *mut ID3DXTextureShader,
                                                                   hConstant:
                                                                       D3DXHANDLE,
                                                                   ppMatrix:
                                                                       *mut *const D3DXMATRIX,
                                                                   Count:
                                                                       UINT)
                                                                  -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXTextureShaderVtbl {
    fn default() -> Struct_ID3DXTextureShaderVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type Enum__D3DXINCLUDE_TYPE = ::libc::c_uint;
pub const D3DXINC_LOCAL: ::libc::c_uint = 0;
pub const D3DXINC_SYSTEM: ::libc::c_uint = 1;
pub const D3DXINC_FORCE_DWORD: ::libc::c_uint = 2147483647;
pub type D3DXINCLUDE_TYPE = Enum__D3DXINCLUDE_TYPE;
pub type LPD3DXINCLUDE_TYPE = *mut Enum__D3DXINCLUDE_TYPE;
pub type ID3DXInclude = Struct_ID3DXInclude;
pub type LPD3DXINCLUDE = *mut Struct_ID3DXInclude;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXInclude {
    pub lpVtbl: *mut Struct_ID3DXIncludeVtbl,
}
impl ::std::default::Default for Struct_ID3DXInclude {
    fn default() -> Struct_ID3DXInclude { unsafe { ::std::mem::zeroed() } }
}
pub type ID3DXIncludeVtbl = Struct_ID3DXIncludeVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXIncludeVtbl {
    pub Open: ::std::option::Option<extern "C" fn
                                        (This: *mut ID3DXInclude,
                                         IncludeType: D3DXINCLUDE_TYPE,
                                         pFileName: LPCSTR,
                                         pParentData: LPCVOID,
                                         ppData: *mut LPCVOID,
                                         pBytes: *mut UINT) -> HRESULT>,
    pub Close: ::std::option::Option<extern "C" fn
                                         (This: *mut ID3DXInclude,
                                          pData: LPCVOID) -> HRESULT>,
}
impl ::std::default::Default for Struct_ID3DXIncludeVtbl {
    fn default() -> Struct_ID3DXIncludeVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXSHADER_CONSTANTTABLE {
    pub Size: DWORD,
    pub Creator: DWORD,
    pub Version: DWORD,
    pub Constants: DWORD,
    pub ConstantInfo: DWORD,
    pub Flags: DWORD,
    pub Target: DWORD,
}
impl ::std::default::Default for Struct__D3DXSHADER_CONSTANTTABLE {
    fn default() -> Struct__D3DXSHADER_CONSTANTTABLE {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXSHADER_CONSTANTTABLE = Struct__D3DXSHADER_CONSTANTTABLE;
pub type LPD3DXSHADER_CONSTANTTABLE = *mut Struct__D3DXSHADER_CONSTANTTABLE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXSHADER_CONSTANTINFO {
    pub Name: DWORD,
    pub RegisterSet: WORD,
    pub RegisterIndex: WORD,
    pub RegisterCount: WORD,
    pub Reserved: WORD,
    pub TypeInfo: DWORD,
    pub DefaultValue: DWORD,
}
impl ::std::default::Default for Struct__D3DXSHADER_CONSTANTINFO {
    fn default() -> Struct__D3DXSHADER_CONSTANTINFO {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXSHADER_CONSTANTINFO = Struct__D3DXSHADER_CONSTANTINFO;
pub type LPD3DXSHADER_CONSTANTINFO = *mut Struct__D3DXSHADER_CONSTANTINFO;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXSHADER_TYPEINFO {
    pub Class: WORD,
    pub Type: WORD,
    pub Rows: WORD,
    pub Columns: WORD,
    pub Elements: WORD,
    pub StructMembers: WORD,
    pub StructMemberInfo: DWORD,
}
impl ::std::default::Default for Struct__D3DXSHADER_TYPEINFO {
    fn default() -> Struct__D3DXSHADER_TYPEINFO {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXSHADER_TYPEINFO = Struct__D3DXSHADER_TYPEINFO;
pub type LPD3DXSHADER_TYPEINFO = *mut Struct__D3DXSHADER_TYPEINFO;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__D3DXSHADER_STRUCTMEMBERINFO {
    pub Name: DWORD,
    pub TypeInfo: DWORD,
}
impl ::std::default::Default for Struct__D3DXSHADER_STRUCTMEMBERINFO {
    fn default() -> Struct__D3DXSHADER_STRUCTMEMBERINFO {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type D3DXSHADER_STRUCTMEMBERINFO = Struct__D3DXSHADER_STRUCTMEMBERINFO;
pub type LPD3DXSHADER_STRUCTMEMBERINFO =
    *mut Struct__D3DXSHADER_STRUCTMEMBERINFO;
extern "C" {
    pub static IID_ID3DXConstantTable: GUID;
    pub static IID_ID3DXTextureShader: GUID;
}
extern "C" {
    pub fn D3DXAssembleShaderFromFileA(pSrcFile: LPCSTR,
                                       pDefines: *const D3DXMACRO,
                                       pInclude: LPD3DXINCLUDE, Flags: DWORD,
                                       ppShader: *mut LPD3DXBUFFER,
                                       ppErrorMsgs: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXAssembleShaderFromFileW(pSrcFile: LPCWSTR,
                                       pDefines: *const D3DXMACRO,
                                       pInclude: LPD3DXINCLUDE, Flags: DWORD,
                                       ppShader: *mut LPD3DXBUFFER,
                                       ppErrorMsgs: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXAssembleShaderFromResourceA(hSrcModule: HMODULE,
                                           pSrcResource: LPCSTR,
                                           pDefines: *const D3DXMACRO,
                                           pInclude: LPD3DXINCLUDE,
                                           Flags: DWORD,
                                           ppShader: *mut LPD3DXBUFFER,
                                           ppErrorMsgs: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXAssembleShaderFromResourceW(hSrcModule: HMODULE,
                                           pSrcResource: LPCWSTR,
                                           pDefines: *const D3DXMACRO,
                                           pInclude: LPD3DXINCLUDE,
                                           Flags: DWORD,
                                           ppShader: *mut LPD3DXBUFFER,
                                           ppErrorMsgs: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXAssembleShader(pSrcData: LPCSTR, SrcDataLen: UINT,
                              pDefines: *const D3DXMACRO,
                              pInclude: LPD3DXINCLUDE, Flags: DWORD,
                              ppShader: *mut LPD3DXBUFFER,
                              ppErrorMsgs: *mut LPD3DXBUFFER) -> HRESULT;
    pub fn D3DXCompileShaderFromFileA(pSrcFile: LPCSTR,
                                      pDefines: *const D3DXMACRO,
                                      pInclude: LPD3DXINCLUDE,
                                      pFunctionName: LPCSTR, pProfile: LPCSTR,
                                      Flags: DWORD,
                                      ppShader: *mut LPD3DXBUFFER,
                                      ppErrorMsgs: *mut LPD3DXBUFFER,
                                      ppConstantTable:
                                          *mut LPD3DXCONSTANTTABLE)
     -> HRESULT;
    pub fn D3DXCompileShaderFromFileW(pSrcFile: LPCWSTR,
                                      pDefines: *const D3DXMACRO,
                                      pInclude: LPD3DXINCLUDE,
                                      pFunctionName: LPCSTR, pProfile: LPCSTR,
                                      Flags: DWORD,
                                      ppShader: *mut LPD3DXBUFFER,
                                      ppErrorMsgs: *mut LPD3DXBUFFER,
                                      ppConstantTable:
                                          *mut LPD3DXCONSTANTTABLE)
     -> HRESULT;
    pub fn D3DXCompileShaderFromResourceA(hSrcModule: HMODULE,
                                          pSrcResource: LPCSTR,
                                          pDefines: *const D3DXMACRO,
                                          pInclude: LPD3DXINCLUDE,
                                          pFunctionName: LPCSTR,
                                          pProfile: LPCSTR, Flags: DWORD,
                                          ppShader: *mut LPD3DXBUFFER,
                                          ppErrorMsgs: *mut LPD3DXBUFFER,
                                          ppConstantTable:
                                              *mut LPD3DXCONSTANTTABLE)
     -> HRESULT;
    pub fn D3DXCompileShaderFromResourceW(hSrcModule: HMODULE,
                                          pSrcResource: LPCWSTR,
                                          pDefines: *const D3DXMACRO,
                                          pInclude: LPD3DXINCLUDE,
                                          pFunctionName: LPCSTR,
                                          pProfile: LPCSTR, Flags: DWORD,
                                          ppShader: *mut LPD3DXBUFFER,
                                          ppErrorMsgs: *mut LPD3DXBUFFER,
                                          ppConstantTable:
                                              *mut LPD3DXCONSTANTTABLE)
     -> HRESULT;
    pub fn D3DXCompileShader(pSrcData: LPCSTR, SrcDataLen: UINT,
                             pDefines: *const D3DXMACRO,
                             pInclude: LPD3DXINCLUDE, pFunctionName: LPCSTR,
                             pProfile: LPCSTR, Flags: DWORD,
                             ppShader: *mut LPD3DXBUFFER,
                             ppErrorMsgs: *mut LPD3DXBUFFER,
                             ppConstantTable: *mut LPD3DXCONSTANTTABLE)
     -> HRESULT;
    pub fn D3DXDisassembleShader(pShader: *const DWORD, EnableColorCode: BOOL,
                                 pComments: LPCSTR,
                                 ppDisassembly: *mut LPD3DXBUFFER) -> HRESULT;
    pub fn D3DXGetPixelShaderProfile(pDevice: LPDIRECT3DDEVICE9) -> LPCSTR;
    pub fn D3DXGetVertexShaderProfile(pDevice: LPDIRECT3DDEVICE9) -> LPCSTR;
    pub fn D3DXFindShaderComment(pFunction: *const DWORD, FourCC: DWORD,
                                 ppData: *mut LPCVOID,
                                 pSizeInBytes: *mut UINT) -> HRESULT;
    pub fn D3DXGetShaderSize(pFunction: *const DWORD) -> UINT;
    pub fn D3DXGetShaderVersion(pFunction: *const DWORD) -> DWORD;
    pub fn D3DXGetShaderInputSemantics(pFunction: *const DWORD,
                                       pSemantics: *mut D3DXSEMANTIC,
                                       pCount: *mut UINT) -> HRESULT;
    pub fn D3DXGetShaderOutputSemantics(pFunction: *const DWORD,
                                        pSemantics: *mut D3DXSEMANTIC,
                                        pCount: *mut UINT) -> HRESULT;
    pub fn D3DXGetShaderSamplers(pFunction: *const DWORD,
                                 pSamplers: *mut LPCSTR, pCount: *mut UINT)
     -> HRESULT;
    pub fn D3DXGetShaderConstantTable(pFunction: *const DWORD,
                                      ppConstantTable:
                                          *mut LPD3DXCONSTANTTABLE)
     -> HRESULT;
    pub fn D3DXGetShaderConstantTableEx(pFunction: *const DWORD, Flags: DWORD,
                                        ppConstantTable:
                                            *mut LPD3DXCONSTANTTABLE)
     -> HRESULT;
    pub fn D3DXCreateTextureShader(pFunction: *const DWORD,
                                   ppTextureShader: *mut LPD3DXTEXTURESHADER)
     -> HRESULT;
    pub fn D3DXPreprocessShaderFromFileA(pSrcFile: LPCSTR,
                                         pDefines: *const D3DXMACRO,
                                         pInclude: LPD3DXINCLUDE,
                                         ppShaderText: *mut LPD3DXBUFFER,
                                         ppErrorMsgs: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXPreprocessShaderFromFileW(pSrcFile: LPCWSTR,
                                         pDefines: *const D3DXMACRO,
                                         pInclude: LPD3DXINCLUDE,
                                         ppShaderText: *mut LPD3DXBUFFER,
                                         ppErrorMsgs: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXPreprocessShaderFromResourceA(hSrcModule: HMODULE,
                                             pSrcResource: LPCSTR,
                                             pDefines: *const D3DXMACRO,
                                             pInclude: LPD3DXINCLUDE,
                                             ppShaderText: *mut LPD3DXBUFFER,
                                             ppErrorMsgs: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXPreprocessShaderFromResourceW(hSrcModule: HMODULE,
                                             pSrcResource: LPCWSTR,
                                             pDefines: *const D3DXMACRO,
                                             pInclude: LPD3DXINCLUDE,
                                             ppShaderText: *mut LPD3DXBUFFER,
                                             ppErrorMsgs: *mut LPD3DXBUFFER)
     -> HRESULT;
    pub fn D3DXPreprocessShader(pSrcData: LPCSTR, SrcDataSize: UINT,
                                pDefines: *const D3DXMACRO,
                                pInclude: LPD3DXINCLUDE,
                                ppShaderText: *mut LPD3DXBUFFER,
                                ppErrorMsgs: *mut LPD3DXBUFFER) -> HRESULT;
}
