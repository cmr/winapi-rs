/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy)]
pub struct Struct_D3DXFLOAT16 {
    pub value: WORD,
}
impl ::std::default::Default for Struct_D3DXFLOAT16 {
    fn default() -> Struct_D3DXFLOAT16 { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXFLOAT16 = Struct_D3DXFLOAT16;
pub type LPD3DXFLOAT16 = *mut Struct_D3DXFLOAT16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_D3DXVECTOR2 {
    pub x: FLOAT,
    pub y: FLOAT,
}
impl ::std::default::Default for Struct_D3DXVECTOR2 {
    fn default() -> Struct_D3DXVECTOR2 { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXVECTOR2 = Struct_D3DXVECTOR2;
pub type LPD3DXVECTOR2 = *mut Struct_D3DXVECTOR2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_D3DXVECTOR2_16F {
    pub x: D3DXFLOAT16,
    pub y: D3DXFLOAT16,
}
impl ::std::default::Default for Struct_D3DXVECTOR2_16F {
    fn default() -> Struct_D3DXVECTOR2_16F { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXVECTOR2_16F = Struct_D3DXVECTOR2_16F;
pub type LPD3DXVECTOR2_16F = *mut Struct_D3DXVECTOR2_16F;
pub type D3DXVECTOR3 = Struct__D3DVECTOR;
pub type LPD3DXVECTOR3 = *mut Struct__D3DVECTOR;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_D3DXVECTOR3_16F {
    pub x: D3DXFLOAT16,
    pub y: D3DXFLOAT16,
    pub z: D3DXFLOAT16,
}
impl ::std::default::Default for Struct_D3DXVECTOR3_16F {
    fn default() -> Struct_D3DXVECTOR3_16F { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXVECTOR3_16F = Struct_D3DXVECTOR3_16F;
pub type LPD3DXVECTOR3_16F = *mut Struct_D3DXVECTOR3_16F;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_D3DXVECTOR4 {
    pub x: FLOAT,
    pub y: FLOAT,
    pub z: FLOAT,
    pub w: FLOAT,
}
impl ::std::default::Default for Struct_D3DXVECTOR4 {
    fn default() -> Struct_D3DXVECTOR4 { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXVECTOR4 = Struct_D3DXVECTOR4;
pub type LPD3DXVECTOR4 = *mut Struct_D3DXVECTOR4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_D3DXVECTOR4_16F {
    pub x: D3DXFLOAT16,
    pub y: D3DXFLOAT16,
    pub z: D3DXFLOAT16,
    pub w: D3DXFLOAT16,
}
impl ::std::default::Default for Struct_D3DXVECTOR4_16F {
    fn default() -> Struct_D3DXVECTOR4_16F { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXVECTOR4_16F = Struct_D3DXVECTOR4_16F;
pub type LPD3DXVECTOR4_16F = *mut Struct_D3DXVECTOR4_16F;
pub type D3DXMATRIX = Struct__D3DMATRIX;
pub type LPD3DXMATRIX = *mut Struct__D3DMATRIX;
pub type _D3DXMATRIXA16 = D3DXMATRIX;
pub type D3DXMATRIXA16 = _D3DXMATRIXA16;
pub type LPD3DXMATRIXA16 = *mut _D3DXMATRIXA16;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_D3DXQUATERNION {
    pub x: FLOAT,
    pub y: FLOAT,
    pub z: FLOAT,
    pub w: FLOAT,
}
impl ::std::default::Default for Struct_D3DXQUATERNION {
    fn default() -> Struct_D3DXQUATERNION { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXQUATERNION = Struct_D3DXQUATERNION;
pub type LPD3DXQUATERNION = *mut Struct_D3DXQUATERNION;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_D3DXPLANE {
    pub a: FLOAT,
    pub b: FLOAT,
    pub c: FLOAT,
    pub d: FLOAT,
}
impl ::std::default::Default for Struct_D3DXPLANE {
    fn default() -> Struct_D3DXPLANE { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXPLANE = Struct_D3DXPLANE;
pub type LPD3DXPLANE = *mut Struct_D3DXPLANE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_D3DXCOLOR {
    pub r: FLOAT,
    pub g: FLOAT,
    pub b: FLOAT,
    pub a: FLOAT,
}
impl ::std::default::Default for Struct_D3DXCOLOR {
    fn default() -> Struct_D3DXCOLOR { unsafe { ::std::mem::zeroed() } }
}
pub type D3DXCOLOR = Struct_D3DXCOLOR;
pub type LPD3DXCOLOR = *mut Struct_D3DXCOLOR;
pub type ID3DXMatrixStack = Struct_ID3DXMatrixStack;
pub type LPD3DXMATRIXSTACK = *mut Struct_ID3DXMatrixStack;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXMatrixStack {
    pub lpVtbl: *mut Struct_ID3DXMatrixStackVtbl,
}
impl ::std::default::Default for Struct_ID3DXMatrixStack {
    fn default() -> Struct_ID3DXMatrixStack {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type ID3DXMatrixStackVtbl = Struct_ID3DXMatrixStackVtbl;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ID3DXMatrixStackVtbl {
    pub QueryInterface: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXMatrixStack,
                                                   riid: *const IID,
                                                   ppvObj: *mut LPVOID)
                                                  -> HRESULT>,
    pub AddRef: ::std::option::Option<extern "C" fn
                                          (This: *mut ID3DXMatrixStack)
                                          -> ULONG>,
    pub Release: ::std::option::Option<extern "C" fn
                                           (This: *mut ID3DXMatrixStack)
                                           -> ULONG>,
    pub Pop: ::std::option::Option<extern "C" fn(This: *mut ID3DXMatrixStack)
                                       -> HRESULT>,
    pub Push: ::std::option::Option<extern "C" fn(This: *mut ID3DXMatrixStack)
                                        -> HRESULT>,
    pub LoadIdentity: ::std::option::Option<extern "C" fn
                                                (This: *mut ID3DXMatrixStack)
                                                -> HRESULT>,
    pub LoadMatrix: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXMatrixStack,
                                               pM: *const D3DXMATRIX)
                                              -> HRESULT>,
    pub MultMatrix: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXMatrixStack,
                                               pM: *const D3DXMATRIX)
                                              -> HRESULT>,
    pub MultMatrixLocal: ::std::option::Option<extern "C" fn
                                                   (This:
                                                        *mut ID3DXMatrixStack,
                                                    pM: *const D3DXMATRIX)
                                                   -> HRESULT>,
    pub RotateAxis: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXMatrixStack,
                                               pV: *const D3DXVECTOR3,
                                               Angle: FLOAT) -> HRESULT>,
    pub RotateAxisLocal: ::std::option::Option<extern "C" fn
                                                   (This:
                                                        *mut ID3DXMatrixStack,
                                                    pV: *const D3DXVECTOR3,
                                                    Angle: FLOAT) -> HRESULT>,
    pub RotateYawPitchRoll: ::std::option::Option<extern "C" fn
                                                      (This:
                                                           *mut ID3DXMatrixStack,
                                                       Yaw: FLOAT,
                                                       Pitch: FLOAT,
                                                       Roll: FLOAT)
                                                      -> HRESULT>,
    pub RotateYawPitchRollLocal: ::std::option::Option<extern "C" fn
                                                           (This:
                                                                *mut ID3DXMatrixStack,
                                                            Yaw: FLOAT,
                                                            Pitch: FLOAT,
                                                            Roll: FLOAT)
                                                           -> HRESULT>,
    pub Scale: ::std::option::Option<extern "C" fn
                                         (This: *mut ID3DXMatrixStack,
                                          x: FLOAT, y: FLOAT, z: FLOAT)
                                         -> HRESULT>,
    pub ScaleLocal: ::std::option::Option<extern "C" fn
                                              (This: *mut ID3DXMatrixStack,
                                               x: FLOAT, y: FLOAT, z: FLOAT)
                                              -> HRESULT>,
    pub Translate: ::std::option::Option<extern "C" fn
                                             (This: *mut ID3DXMatrixStack,
                                              x: FLOAT, y: FLOAT, z: FLOAT)
                                             -> HRESULT>,
    pub TranslateLocal: ::std::option::Option<extern "C" fn
                                                  (This:
                                                       *mut ID3DXMatrixStack,
                                                   x: FLOAT, y: FLOAT,
                                                   z: FLOAT) -> HRESULT>,
    pub GetTop: ::std::option::Option<extern "C" fn
                                          (This: *mut ID3DXMatrixStack)
                                          -> *mut D3DXMATRIX>,
}
impl ::std::default::Default for Struct_ID3DXMatrixStackVtbl {
    fn default() -> Struct_ID3DXMatrixStackVtbl {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub static IID_ID3DXMatrixStack: GUID;
}
extern "C" {
    pub fn D3DXFloat32To16Array(pOut: *mut D3DXFLOAT16, pIn: *const FLOAT,
                                n: UINT) -> *mut D3DXFLOAT16;
    pub fn D3DXFloat16To32Array(pOut: *mut FLOAT, pIn: *const D3DXFLOAT16,
                                n: UINT) -> *mut FLOAT;
    pub fn D3DXVec2Length(pV: *const D3DXVECTOR2) -> FLOAT;
    pub fn D3DXVec2LengthSq(pV: *const D3DXVECTOR2) -> FLOAT;
    pub fn D3DXVec2Dot(pV1: *const D3DXVECTOR2, pV2: *const D3DXVECTOR2)
     -> FLOAT;
    pub fn D3DXVec2CCW(pV1: *const D3DXVECTOR2, pV2: *const D3DXVECTOR2)
     -> FLOAT;
    pub fn D3DXVec2Add(pOut: *mut D3DXVECTOR2, pV1: *const D3DXVECTOR2,
                       pV2: *const D3DXVECTOR2) -> *mut D3DXVECTOR2;
    pub fn D3DXVec2Subtract(pOut: *mut D3DXVECTOR2, pV1: *const D3DXVECTOR2,
                            pV2: *const D3DXVECTOR2) -> *mut D3DXVECTOR2;
    pub fn D3DXVec2Minimize(pOut: *mut D3DXVECTOR2, pV1: *const D3DXVECTOR2,
                            pV2: *const D3DXVECTOR2) -> *mut D3DXVECTOR2;
    pub fn D3DXVec2Maximize(pOut: *mut D3DXVECTOR2, pV1: *const D3DXVECTOR2,
                            pV2: *const D3DXVECTOR2) -> *mut D3DXVECTOR2;
    pub fn D3DXVec2Scale(pOut: *mut D3DXVECTOR2, pV: *const D3DXVECTOR2,
                         s: FLOAT) -> *mut D3DXVECTOR2;
    pub fn D3DXVec2Lerp(pOut: *mut D3DXVECTOR2, pV1: *const D3DXVECTOR2,
                        pV2: *const D3DXVECTOR2, s: FLOAT)
     -> *mut D3DXVECTOR2;
    pub fn D3DXVec2Normalize(pOut: *mut D3DXVECTOR2, pV: *const D3DXVECTOR2)
     -> *mut D3DXVECTOR2;
    pub fn D3DXVec2Hermite(pOut: *mut D3DXVECTOR2, pV1: *const D3DXVECTOR2,
                           pT1: *const D3DXVECTOR2, pV2: *const D3DXVECTOR2,
                           pT2: *const D3DXVECTOR2, s: FLOAT)
     -> *mut D3DXVECTOR2;
    pub fn D3DXVec2CatmullRom(pOut: *mut D3DXVECTOR2, pV0: *const D3DXVECTOR2,
                              pV1: *const D3DXVECTOR2,
                              pV2: *const D3DXVECTOR2,
                              pV3: *const D3DXVECTOR2, s: FLOAT)
     -> *mut D3DXVECTOR2;
    pub fn D3DXVec2BaryCentric(pOut: *mut D3DXVECTOR2,
                               pV1: *const D3DXVECTOR2,
                               pV2: *const D3DXVECTOR2,
                               pV3: *const D3DXVECTOR2, f: FLOAT, g: FLOAT)
     -> *mut D3DXVECTOR2;
    pub fn D3DXVec2Transform(pOut: *mut D3DXVECTOR4, pV: *const D3DXVECTOR2,
                             pM: *const D3DXMATRIX) -> *mut D3DXVECTOR4;
    pub fn D3DXVec2TransformCoord(pOut: *mut D3DXVECTOR2,
                                  pV: *const D3DXVECTOR2,
                                  pM: *const D3DXMATRIX) -> *mut D3DXVECTOR2;
    pub fn D3DXVec2TransformNormal(pOut: *mut D3DXVECTOR2,
                                   pV: *const D3DXVECTOR2,
                                   pM: *const D3DXMATRIX) -> *mut D3DXVECTOR2;
    pub fn D3DXVec2TransformArray(pOut: *mut D3DXVECTOR4, OutStride: UINT,
                                  pV: *const D3DXVECTOR2, VStride: UINT,
                                  pM: *const D3DXMATRIX, n: UINT)
     -> *mut D3DXVECTOR4;
    pub fn D3DXVec2TransformCoordArray(pOut: *mut D3DXVECTOR2,
                                       OutStride: UINT,
                                       pV: *const D3DXVECTOR2, VStride: UINT,
                                       pM: *const D3DXMATRIX, n: UINT)
     -> *mut D3DXVECTOR2;
    pub fn D3DXVec2TransformNormalArray(pOut: *mut D3DXVECTOR2,
                                        OutStride: UINT,
                                        pV: *const D3DXVECTOR2, VStride: UINT,
                                        pM: *const D3DXMATRIX, n: UINT)
     -> *mut D3DXVECTOR2;
    pub fn D3DXVec3Length(pV: *const D3DXVECTOR3) -> FLOAT;
    pub fn D3DXVec3LengthSq(pV: *const D3DXVECTOR3) -> FLOAT;
    pub fn D3DXVec3Dot(pV1: *const D3DXVECTOR3, pV2: *const D3DXVECTOR3)
     -> FLOAT;
    pub fn D3DXVec3Cross(pOut: *mut D3DXVECTOR3, pV1: *const D3DXVECTOR3,
                         pV2: *const D3DXVECTOR3) -> *mut D3DXVECTOR3;
    pub fn D3DXVec3Add(pOut: *mut D3DXVECTOR3, pV1: *const D3DXVECTOR3,
                       pV2: *const D3DXVECTOR3) -> *mut D3DXVECTOR3;
    pub fn D3DXVec3Subtract(pOut: *mut D3DXVECTOR3, pV1: *const D3DXVECTOR3,
                            pV2: *const D3DXVECTOR3) -> *mut D3DXVECTOR3;
    pub fn D3DXVec3Minimize(pOut: *mut D3DXVECTOR3, pV1: *const D3DXVECTOR3,
                            pV2: *const D3DXVECTOR3) -> *mut D3DXVECTOR3;
    pub fn D3DXVec3Maximize(pOut: *mut D3DXVECTOR3, pV1: *const D3DXVECTOR3,
                            pV2: *const D3DXVECTOR3) -> *mut D3DXVECTOR3;
    pub fn D3DXVec3Scale(pOut: *mut D3DXVECTOR3, pV: *const D3DXVECTOR3,
                         s: FLOAT) -> *mut D3DXVECTOR3;
    pub fn D3DXVec3Lerp(pOut: *mut D3DXVECTOR3, pV1: *const D3DXVECTOR3,
                        pV2: *const D3DXVECTOR3, s: FLOAT)
     -> *mut D3DXVECTOR3;
    pub fn D3DXVec3Normalize(pOut: *mut D3DXVECTOR3, pV: *const D3DXVECTOR3)
     -> *mut D3DXVECTOR3;
    pub fn D3DXVec3Hermite(pOut: *mut D3DXVECTOR3, pV1: *const D3DXVECTOR3,
                           pT1: *const D3DXVECTOR3, pV2: *const D3DXVECTOR3,
                           pT2: *const D3DXVECTOR3, s: FLOAT)
     -> *mut D3DXVECTOR3;
    pub fn D3DXVec3CatmullRom(pOut: *mut D3DXVECTOR3, pV0: *const D3DXVECTOR3,
                              pV1: *const D3DXVECTOR3,
                              pV2: *const D3DXVECTOR3,
                              pV3: *const D3DXVECTOR3, s: FLOAT)
     -> *mut D3DXVECTOR3;
    pub fn D3DXVec3BaryCentric(pOut: *mut D3DXVECTOR3,
                               pV1: *const D3DXVECTOR3,
                               pV2: *const D3DXVECTOR3,
                               pV3: *const D3DXVECTOR3, f: FLOAT, g: FLOAT)
     -> *mut D3DXVECTOR3;
    pub fn D3DXVec3Transform(pOut: *mut D3DXVECTOR4, pV: *const D3DXVECTOR3,
                             pM: *const D3DXMATRIX) -> *mut D3DXVECTOR4;
    pub fn D3DXVec3TransformCoord(pOut: *mut D3DXVECTOR3,
                                  pV: *const D3DXVECTOR3,
                                  pM: *const D3DXMATRIX) -> *mut D3DXVECTOR3;
    pub fn D3DXVec3TransformNormal(pOut: *mut D3DXVECTOR3,
                                   pV: *const D3DXVECTOR3,
                                   pM: *const D3DXMATRIX) -> *mut D3DXVECTOR3;
    pub fn D3DXVec3TransformArray(pOut: *mut D3DXVECTOR4, OutStride: UINT,
                                  pV: *const D3DXVECTOR3, VStride: UINT,
                                  pM: *const D3DXMATRIX, n: UINT)
     -> *mut D3DXVECTOR4;
    pub fn D3DXVec3TransformCoordArray(pOut: *mut D3DXVECTOR3,
                                       OutStride: UINT,
                                       pV: *const D3DXVECTOR3, VStride: UINT,
                                       pM: *const D3DXMATRIX, n: UINT)
     -> *mut D3DXVECTOR3;
    pub fn D3DXVec3TransformNormalArray(pOut: *mut D3DXVECTOR3,
                                        OutStride: UINT,
                                        pV: *const D3DXVECTOR3, VStride: UINT,
                                        pM: *const D3DXMATRIX, n: UINT)
     -> *mut D3DXVECTOR3;
    pub fn D3DXVec3Project(pOut: *mut D3DXVECTOR3, pV: *const D3DXVECTOR3,
                           pViewport: *const D3DVIEWPORT9,
                           pProjection: *const D3DXMATRIX,
                           pView: *const D3DXMATRIX,
                           pWorld: *const D3DXMATRIX) -> *mut D3DXVECTOR3;
    pub fn D3DXVec3Unproject(pOut: *mut D3DXVECTOR3, pV: *const D3DXVECTOR3,
                             pViewport: *const D3DVIEWPORT9,
                             pProjection: *const D3DXMATRIX,
                             pView: *const D3DXMATRIX,
                             pWorld: *const D3DXMATRIX) -> *mut D3DXVECTOR3;
    pub fn D3DXVec3ProjectArray(pOut: *mut D3DXVECTOR3, OutStride: UINT,
                                pV: *const D3DXVECTOR3, VStride: UINT,
                                pViewport: *const D3DVIEWPORT9,
                                pProjection: *const D3DXMATRIX,
                                pView: *const D3DXMATRIX,
                                pWorld: *const D3DXMATRIX, n: UINT)
     -> *mut D3DXVECTOR3;
    pub fn D3DXVec3UnprojectArray(pOut: *mut D3DXVECTOR3, OutStride: UINT,
                                  pV: *const D3DXVECTOR3, VStride: UINT,
                                  pViewport: *const D3DVIEWPORT9,
                                  pProjection: *const D3DXMATRIX,
                                  pView: *const D3DXMATRIX,
                                  pWorld: *const D3DXMATRIX, n: UINT)
     -> *mut D3DXVECTOR3;
    pub fn D3DXVec4Length(pV: *const D3DXVECTOR4) -> FLOAT;
    pub fn D3DXVec4LengthSq(pV: *const D3DXVECTOR4) -> FLOAT;
    pub fn D3DXVec4Dot(pV1: *const D3DXVECTOR4, pV2: *const D3DXVECTOR4)
     -> FLOAT;
    pub fn D3DXVec4Add(pOut: *mut D3DXVECTOR4, pV1: *const D3DXVECTOR4,
                       pV2: *const D3DXVECTOR4) -> *mut D3DXVECTOR4;
    pub fn D3DXVec4Subtract(pOut: *mut D3DXVECTOR4, pV1: *const D3DXVECTOR4,
                            pV2: *const D3DXVECTOR4) -> *mut D3DXVECTOR4;
    pub fn D3DXVec4Minimize(pOut: *mut D3DXVECTOR4, pV1: *const D3DXVECTOR4,
                            pV2: *const D3DXVECTOR4) -> *mut D3DXVECTOR4;
    pub fn D3DXVec4Maximize(pOut: *mut D3DXVECTOR4, pV1: *const D3DXVECTOR4,
                            pV2: *const D3DXVECTOR4) -> *mut D3DXVECTOR4;
    pub fn D3DXVec4Scale(pOut: *mut D3DXVECTOR4, pV: *const D3DXVECTOR4,
                         s: FLOAT) -> *mut D3DXVECTOR4;
    pub fn D3DXVec4Lerp(pOut: *mut D3DXVECTOR4, pV1: *const D3DXVECTOR4,
                        pV2: *const D3DXVECTOR4, s: FLOAT)
     -> *mut D3DXVECTOR4;
    pub fn D3DXVec4Cross(pOut: *mut D3DXVECTOR4, pV1: *const D3DXVECTOR4,
                         pV2: *const D3DXVECTOR4, pV3: *const D3DXVECTOR4)
     -> *mut D3DXVECTOR4;
    pub fn D3DXVec4Normalize(pOut: *mut D3DXVECTOR4, pV: *const D3DXVECTOR4)
     -> *mut D3DXVECTOR4;
    pub fn D3DXVec4Hermite(pOut: *mut D3DXVECTOR4, pV1: *const D3DXVECTOR4,
                           pT1: *const D3DXVECTOR4, pV2: *const D3DXVECTOR4,
                           pT2: *const D3DXVECTOR4, s: FLOAT)
     -> *mut D3DXVECTOR4;
    pub fn D3DXVec4CatmullRom(pOut: *mut D3DXVECTOR4, pV0: *const D3DXVECTOR4,
                              pV1: *const D3DXVECTOR4,
                              pV2: *const D3DXVECTOR4,
                              pV3: *const D3DXVECTOR4, s: FLOAT)
     -> *mut D3DXVECTOR4;
    pub fn D3DXVec4BaryCentric(pOut: *mut D3DXVECTOR4,
                               pV1: *const D3DXVECTOR4,
                               pV2: *const D3DXVECTOR4,
                               pV3: *const D3DXVECTOR4, f: FLOAT, g: FLOAT)
     -> *mut D3DXVECTOR4;
    pub fn D3DXVec4Transform(pOut: *mut D3DXVECTOR4, pV: *const D3DXVECTOR4,
                             pM: *const D3DXMATRIX) -> *mut D3DXVECTOR4;
    pub fn D3DXVec4TransformArray(pOut: *mut D3DXVECTOR4, OutStride: UINT,
                                  pV: *const D3DXVECTOR4, VStride: UINT,
                                  pM: *const D3DXMATRIX, n: UINT)
     -> *mut D3DXVECTOR4;
    pub fn D3DXMatrixIdentity(pOut: *mut D3DXMATRIX) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixIsIdentity(pM: *const D3DXMATRIX) -> BOOL;
    pub fn D3DXMatrixDeterminant(pM: *const D3DXMATRIX) -> FLOAT;
    pub fn D3DXMatrixDecompose(pOutScale: *mut D3DXVECTOR3,
                               pOutRotation: *mut D3DXQUATERNION,
                               pOutTranslation: *mut D3DXVECTOR3,
                               pM: *const D3DXMATRIX) -> HRESULT;
    pub fn D3DXMatrixTranspose(pOut: *mut D3DXMATRIX, pM: *const D3DXMATRIX)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixMultiply(pOut: *mut D3DXMATRIX, pM1: *const D3DXMATRIX,
                              pM2: *const D3DXMATRIX) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixMultiplyTranspose(pOut: *mut D3DXMATRIX,
                                       pM1: *const D3DXMATRIX,
                                       pM2: *const D3DXMATRIX)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixInverse(pOut: *mut D3DXMATRIX, pDeterminant: *mut FLOAT,
                             pM: *const D3DXMATRIX) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixScaling(pOut: *mut D3DXMATRIX, sx: FLOAT, sy: FLOAT,
                             sz: FLOAT) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixTranslation(pOut: *mut D3DXMATRIX, x: FLOAT, y: FLOAT,
                                 z: FLOAT) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixRotationX(pOut: *mut D3DXMATRIX, Angle: FLOAT)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixRotationY(pOut: *mut D3DXMATRIX, Angle: FLOAT)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixRotationZ(pOut: *mut D3DXMATRIX, Angle: FLOAT)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixRotationAxis(pOut: *mut D3DXMATRIX,
                                  pV: *const D3DXVECTOR3, Angle: FLOAT)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixRotationQuaternion(pOut: *mut D3DXMATRIX,
                                        pQ: *const D3DXQUATERNION)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixRotationYawPitchRoll(pOut: *mut D3DXMATRIX, Yaw: FLOAT,
                                          Pitch: FLOAT, Roll: FLOAT)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixTransformation(pOut: *mut D3DXMATRIX,
                                    pScalingCenter: *const D3DXVECTOR3,
                                    pScalingRotation: *const D3DXQUATERNION,
                                    pScaling: *const D3DXVECTOR3,
                                    pRotationCenter: *const D3DXVECTOR3,
                                    pRotation: *const D3DXQUATERNION,
                                    pTranslation: *const D3DXVECTOR3)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixTransformation2D(pOut: *mut D3DXMATRIX,
                                      pScalingCenter: *const D3DXVECTOR2,
                                      ScalingRotation: FLOAT,
                                      pScaling: *const D3DXVECTOR2,
                                      pRotationCenter: *const D3DXVECTOR2,
                                      Rotation: FLOAT,
                                      pTranslation: *const D3DXVECTOR2)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixAffineTransformation(pOut: *mut D3DXMATRIX,
                                          Scaling: FLOAT,
                                          pRotationCenter: *const D3DXVECTOR3,
                                          pRotation: *const D3DXQUATERNION,
                                          pTranslation: *const D3DXVECTOR3)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixAffineTransformation2D(pOut: *mut D3DXMATRIX,
                                            Scaling: FLOAT,
                                            pRotationCenter:
                                                *const D3DXVECTOR2,
                                            Rotation: FLOAT,
                                            pTranslation: *const D3DXVECTOR2)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixLookAtRH(pOut: *mut D3DXMATRIX, pEye: *const D3DXVECTOR3,
                              pAt: *const D3DXVECTOR3,
                              pUp: *const D3DXVECTOR3) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixLookAtLH(pOut: *mut D3DXMATRIX, pEye: *const D3DXVECTOR3,
                              pAt: *const D3DXVECTOR3,
                              pUp: *const D3DXVECTOR3) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixPerspectiveRH(pOut: *mut D3DXMATRIX, w: FLOAT, h: FLOAT,
                                   zn: FLOAT, zf: FLOAT) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixPerspectiveLH(pOut: *mut D3DXMATRIX, w: FLOAT, h: FLOAT,
                                   zn: FLOAT, zf: FLOAT) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixPerspectiveFovRH(pOut: *mut D3DXMATRIX, fovy: FLOAT,
                                      Aspect: FLOAT, zn: FLOAT, zf: FLOAT)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixPerspectiveFovLH(pOut: *mut D3DXMATRIX, fovy: FLOAT,
                                      Aspect: FLOAT, zn: FLOAT, zf: FLOAT)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixPerspectiveOffCenterRH(pOut: *mut D3DXMATRIX, l: FLOAT,
                                            r: FLOAT, b: FLOAT, t: FLOAT,
                                            zn: FLOAT, zf: FLOAT)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixPerspectiveOffCenterLH(pOut: *mut D3DXMATRIX, l: FLOAT,
                                            r: FLOAT, b: FLOAT, t: FLOAT,
                                            zn: FLOAT, zf: FLOAT)
     -> *mut D3DXMATRIX;
    pub fn D3DXMatrixOrthoRH(pOut: *mut D3DXMATRIX, w: FLOAT, h: FLOAT,
                             zn: FLOAT, zf: FLOAT) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixOrthoLH(pOut: *mut D3DXMATRIX, w: FLOAT, h: FLOAT,
                             zn: FLOAT, zf: FLOAT) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixOrthoOffCenterRH(pOut: *mut D3DXMATRIX, l: FLOAT,
                                      r: FLOAT, b: FLOAT, t: FLOAT, zn: FLOAT,
                                      zf: FLOAT) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixOrthoOffCenterLH(pOut: *mut D3DXMATRIX, l: FLOAT,
                                      r: FLOAT, b: FLOAT, t: FLOAT, zn: FLOAT,
                                      zf: FLOAT) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixShadow(pOut: *mut D3DXMATRIX, pLight: *const D3DXVECTOR4,
                            pPlane: *const D3DXPLANE) -> *mut D3DXMATRIX;
    pub fn D3DXMatrixReflect(pOut: *mut D3DXMATRIX, pPlane: *const D3DXPLANE)
     -> *mut D3DXMATRIX;
    pub fn D3DXQuaternionLength(pQ: *const D3DXQUATERNION) -> FLOAT;
    pub fn D3DXQuaternionLengthSq(pQ: *const D3DXQUATERNION) -> FLOAT;
    pub fn D3DXQuaternionDot(pQ1: *const D3DXQUATERNION,
                             pQ2: *const D3DXQUATERNION) -> FLOAT;
    pub fn D3DXQuaternionIdentity(pOut: *mut D3DXQUATERNION)
     -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionIsIdentity(pQ: *const D3DXQUATERNION) -> BOOL;
    pub fn D3DXQuaternionConjugate(pOut: *mut D3DXQUATERNION,
                                   pQ: *const D3DXQUATERNION)
     -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionToAxisAngle(pQ: *const D3DXQUATERNION,
                                     pAxis: *mut D3DXVECTOR3,
                                     pAngle: *mut FLOAT) -> ();
    pub fn D3DXQuaternionRotationMatrix(pOut: *mut D3DXQUATERNION,
                                        pM: *const D3DXMATRIX)
     -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionRotationAxis(pOut: *mut D3DXQUATERNION,
                                      pV: *const D3DXVECTOR3, Angle: FLOAT)
     -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionRotationYawPitchRoll(pOut: *mut D3DXQUATERNION,
                                              Yaw: FLOAT, Pitch: FLOAT,
                                              Roll: FLOAT)
     -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionMultiply(pOut: *mut D3DXQUATERNION,
                                  pQ1: *const D3DXQUATERNION,
                                  pQ2: *const D3DXQUATERNION)
     -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionNormalize(pOut: *mut D3DXQUATERNION,
                                   pQ: *const D3DXQUATERNION)
     -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionInverse(pOut: *mut D3DXQUATERNION,
                                 pQ: *const D3DXQUATERNION)
     -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionLn(pOut: *mut D3DXQUATERNION,
                            pQ: *const D3DXQUATERNION) -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionExp(pOut: *mut D3DXQUATERNION,
                             pQ: *const D3DXQUATERNION)
     -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionSlerp(pOut: *mut D3DXQUATERNION,
                               pQ1: *const D3DXQUATERNION,
                               pQ2: *const D3DXQUATERNION, t: FLOAT)
     -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionSquad(pOut: *mut D3DXQUATERNION,
                               pQ1: *const D3DXQUATERNION,
                               pA: *const D3DXQUATERNION,
                               pB: *const D3DXQUATERNION,
                               pC: *const D3DXQUATERNION, t: FLOAT)
     -> *mut D3DXQUATERNION;
    pub fn D3DXQuaternionSquadSetup(pAOut: *mut D3DXQUATERNION,
                                    pBOut: *mut D3DXQUATERNION,
                                    pCOut: *mut D3DXQUATERNION,
                                    pQ0: *const D3DXQUATERNION,
                                    pQ1: *const D3DXQUATERNION,
                                    pQ2: *const D3DXQUATERNION,
                                    pQ3: *const D3DXQUATERNION) -> ();
    pub fn D3DXQuaternionBaryCentric(pOut: *mut D3DXQUATERNION,
                                     pQ1: *const D3DXQUATERNION,
                                     pQ2: *const D3DXQUATERNION,
                                     pQ3: *const D3DXQUATERNION, f: FLOAT,
                                     g: FLOAT) -> *mut D3DXQUATERNION;
    pub fn D3DXPlaneDot(pP: *const D3DXPLANE, pV: *const D3DXVECTOR4)
     -> FLOAT;
    pub fn D3DXPlaneDotCoord(pP: *const D3DXPLANE, pV: *const D3DXVECTOR3)
     -> FLOAT;
    pub fn D3DXPlaneDotNormal(pP: *const D3DXPLANE, pV: *const D3DXVECTOR3)
     -> FLOAT;
    pub fn D3DXPlaneScale(pOut: *mut D3DXPLANE, pP: *const D3DXPLANE,
                          s: FLOAT) -> *mut D3DXPLANE;
    pub fn D3DXPlaneNormalize(pOut: *mut D3DXPLANE, pP: *const D3DXPLANE)
     -> *mut D3DXPLANE;
    pub fn D3DXPlaneIntersectLine(pOut: *mut D3DXVECTOR3,
                                  pP: *const D3DXPLANE,
                                  pV1: *const D3DXVECTOR3,
                                  pV2: *const D3DXVECTOR3)
     -> *mut D3DXVECTOR3;
    pub fn D3DXPlaneFromPointNormal(pOut: *mut D3DXPLANE,
                                    pPoint: *const D3DXVECTOR3,
                                    pNormal: *const D3DXVECTOR3)
     -> *mut D3DXPLANE;
    pub fn D3DXPlaneFromPoints(pOut: *mut D3DXPLANE, pV1: *const D3DXVECTOR3,
                               pV2: *const D3DXVECTOR3,
                               pV3: *const D3DXVECTOR3) -> *mut D3DXPLANE;
    pub fn D3DXPlaneTransform(pOut: *mut D3DXPLANE, pP: *const D3DXPLANE,
                              pM: *const D3DXMATRIX) -> *mut D3DXPLANE;
    pub fn D3DXPlaneTransformArray(pOut: *mut D3DXPLANE, OutStride: UINT,
                                   pP: *const D3DXPLANE, PStride: UINT,
                                   pM: *const D3DXMATRIX, n: UINT)
     -> *mut D3DXPLANE;
    pub fn D3DXColorNegative(pOut: *mut D3DXCOLOR, pC: *const D3DXCOLOR)
     -> *mut D3DXCOLOR;
    pub fn D3DXColorAdd(pOut: *mut D3DXCOLOR, pC1: *const D3DXCOLOR,
                        pC2: *const D3DXCOLOR) -> *mut D3DXCOLOR;
    pub fn D3DXColorSubtract(pOut: *mut D3DXCOLOR, pC1: *const D3DXCOLOR,
                             pC2: *const D3DXCOLOR) -> *mut D3DXCOLOR;
    pub fn D3DXColorScale(pOut: *mut D3DXCOLOR, pC: *const D3DXCOLOR,
                          s: FLOAT) -> *mut D3DXCOLOR;
    pub fn D3DXColorModulate(pOut: *mut D3DXCOLOR, pC1: *const D3DXCOLOR,
                             pC2: *const D3DXCOLOR) -> *mut D3DXCOLOR;
    pub fn D3DXColorLerp(pOut: *mut D3DXCOLOR, pC1: *const D3DXCOLOR,
                         pC2: *const D3DXCOLOR, s: FLOAT) -> *mut D3DXCOLOR;
    pub fn D3DXColorAdjustSaturation(pOut: *mut D3DXCOLOR,
                                     pC: *const D3DXCOLOR, s: FLOAT)
     -> *mut D3DXCOLOR;
    pub fn D3DXColorAdjustContrast(pOut: *mut D3DXCOLOR, pC: *const D3DXCOLOR,
                                   c: FLOAT) -> *mut D3DXCOLOR;
    pub fn D3DXFresnelTerm(CosTheta: FLOAT, RefractionIndex: FLOAT) -> FLOAT;
    pub fn D3DXCreateMatrixStack(Flags: DWORD,
                                 ppStack: *mut LPD3DXMATRIXSTACK) -> HRESULT;
    pub fn D3DXSHEvalDirection(pOut: *mut FLOAT, Order: UINT,
                               pDir: *const D3DXVECTOR3) -> *mut FLOAT;
    pub fn D3DXSHRotate(pOut: *mut FLOAT, Order: UINT,
                        pMatrix: *const D3DXMATRIX, pIn: *const FLOAT)
     -> *mut FLOAT;
    pub fn D3DXSHRotateZ(pOut: *mut FLOAT, Order: UINT, Angle: FLOAT,
                         pIn: *const FLOAT) -> *mut FLOAT;
    pub fn D3DXSHAdd(pOut: *mut FLOAT, Order: UINT, pA: *const FLOAT,
                     pB: *const FLOAT) -> *mut FLOAT;
    pub fn D3DXSHScale(pOut: *mut FLOAT, Order: UINT, pIn: *const FLOAT,
                       Scale: FLOAT) -> *mut FLOAT;
    pub fn D3DXSHDot(Order: UINT, pA: *const FLOAT, pB: *const FLOAT)
     -> FLOAT;
    pub fn D3DXSHMultiply2(pOut: *mut FLOAT, pF: *const FLOAT,
                           pG: *const FLOAT) -> *mut FLOAT;
    pub fn D3DXSHMultiply3(pOut: *mut FLOAT, pF: *const FLOAT,
                           pG: *const FLOAT) -> *mut FLOAT;
    pub fn D3DXSHMultiply4(pOut: *mut FLOAT, pF: *const FLOAT,
                           pG: *const FLOAT) -> *mut FLOAT;
    pub fn D3DXSHMultiply5(pOut: *mut FLOAT, pF: *const FLOAT,
                           pG: *const FLOAT) -> *mut FLOAT;
    pub fn D3DXSHMultiply6(pOut: *mut FLOAT, pF: *const FLOAT,
                           pG: *const FLOAT) -> *mut FLOAT;
    pub fn D3DXSHEvalDirectionalLight(Order: UINT, pDir: *const D3DXVECTOR3,
                                      RIntensity: FLOAT, GIntensity: FLOAT,
                                      BIntensity: FLOAT, pROut: *mut FLOAT,
                                      pGOut: *mut FLOAT, pBOut: *mut FLOAT)
     -> HRESULT;
    pub fn D3DXSHEvalSphericalLight(Order: UINT, pPos: *const D3DXVECTOR3,
                                    Radius: FLOAT, RIntensity: FLOAT,
                                    GIntensity: FLOAT, BIntensity: FLOAT,
                                    pROut: *mut FLOAT, pGOut: *mut FLOAT,
                                    pBOut: *mut FLOAT) -> HRESULT;
    pub fn D3DXSHEvalConeLight(Order: UINT, pDir: *const D3DXVECTOR3,
                               Radius: FLOAT, RIntensity: FLOAT,
                               GIntensity: FLOAT, BIntensity: FLOAT,
                               pROut: *mut FLOAT, pGOut: *mut FLOAT,
                               pBOut: *mut FLOAT) -> HRESULT;
    pub fn D3DXSHEvalHemisphereLight(Order: UINT, pDir: *const D3DXVECTOR3,
                                     Top: D3DXCOLOR, Bottom: D3DXCOLOR,
                                     pROut: *mut FLOAT, pGOut: *mut FLOAT,
                                     pBOut: *mut FLOAT) -> HRESULT;
    pub fn D3DXSHProjectCubeMap(uOrder: UINT,
                                pCubeMap: LPDIRECT3DCUBETEXTURE9,
                                pROut: *mut FLOAT, pGOut: *mut FLOAT,
                                pBOut: *mut FLOAT) -> HRESULT;
}
