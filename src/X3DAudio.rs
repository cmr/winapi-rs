/* automatically generated by rust-bindgen */

pub type FLOAT32 = ::libc::c_float;
pub type X3DAUDIO_VECTOR = D3DVECTOR;
pub type X3DAUDIO_HANDLE = [BYTE; 20usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct_X3DAUDIO_DISTANCE_CURVE_POINT {
    pub Distance: FLOAT32,
    pub DSPSetting: FLOAT32,
}
impl ::std::default::Default for Struct_X3DAUDIO_DISTANCE_CURVE_POINT {
    fn default() -> Struct_X3DAUDIO_DISTANCE_CURVE_POINT {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type X3DAUDIO_DISTANCE_CURVE_POINT = Struct_X3DAUDIO_DISTANCE_CURVE_POINT;
pub type LPX3DAUDIO_DISTANCE_CURVE_POINT =
    *mut Struct_X3DAUDIO_DISTANCE_CURVE_POINT;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_X3DAUDIO_DISTANCE_CURVE {
    pub pPoints: *mut X3DAUDIO_DISTANCE_CURVE_POINT,
    pub PointCount: UINT32,
}
impl ::std::default::Default for Struct_X3DAUDIO_DISTANCE_CURVE {
    fn default() -> Struct_X3DAUDIO_DISTANCE_CURVE {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type X3DAUDIO_DISTANCE_CURVE = Struct_X3DAUDIO_DISTANCE_CURVE;
pub type LPX3DAUDIO_DISTANCE_CURVE = *mut Struct_X3DAUDIO_DISTANCE_CURVE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_X3DAUDIO_CONE {
    pub InnerAngle: FLOAT32,
    pub OuterAngle: FLOAT32,
    pub InnerVolume: FLOAT32,
    pub OuterVolume: FLOAT32,
    pub InnerLPF: FLOAT32,
    pub OuterLPF: FLOAT32,
    pub InnerReverb: FLOAT32,
    pub OuterReverb: FLOAT32,
}
impl ::std::default::Default for Struct_X3DAUDIO_CONE {
    fn default() -> Struct_X3DAUDIO_CONE { unsafe { ::std::mem::zeroed() } }
}
pub type X3DAUDIO_CONE = Struct_X3DAUDIO_CONE;
pub type LPX3DAUDIO_CONE = *mut Struct_X3DAUDIO_CONE;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_X3DAUDIO_LISTENER {
    pub OrientFront: X3DAUDIO_VECTOR,
    pub OrientTop: X3DAUDIO_VECTOR,
    pub Position: X3DAUDIO_VECTOR,
    pub Velocity: X3DAUDIO_VECTOR,
    pub pCone: *mut X3DAUDIO_CONE,
}
impl ::std::default::Default for Struct_X3DAUDIO_LISTENER {
    fn default() -> Struct_X3DAUDIO_LISTENER {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type X3DAUDIO_LISTENER = Struct_X3DAUDIO_LISTENER;
pub type LPX3DAUDIO_LISTENER = *mut Struct_X3DAUDIO_LISTENER;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_X3DAUDIO_EMITTER {
    pub pCone: *mut X3DAUDIO_CONE,
    pub OrientFront: X3DAUDIO_VECTOR,
    pub OrientTop: X3DAUDIO_VECTOR,
    pub Position: X3DAUDIO_VECTOR,
    pub Velocity: X3DAUDIO_VECTOR,
    pub InnerRadius: FLOAT32,
    pub InnerRadiusAngle: FLOAT32,
    pub ChannelCount: UINT32,
    pub ChannelRadius: FLOAT32,
    pub pChannelAzimuths: *mut FLOAT32,
    pub pVolumeCurve: *mut X3DAUDIO_DISTANCE_CURVE,
    pub pLFECurve: *mut X3DAUDIO_DISTANCE_CURVE,
    pub pLPFDirectCurve: *mut X3DAUDIO_DISTANCE_CURVE,
    pub pLPFReverbCurve: *mut X3DAUDIO_DISTANCE_CURVE,
    pub pReverbCurve: *mut X3DAUDIO_DISTANCE_CURVE,
    pub CurveDistanceScaler: FLOAT32,
    pub DopplerScaler: FLOAT32,
}
impl ::std::default::Default for Struct_X3DAUDIO_EMITTER {
    fn default() -> Struct_X3DAUDIO_EMITTER {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type X3DAUDIO_EMITTER = Struct_X3DAUDIO_EMITTER;
pub type LPX3DAUDIO_EMITTER = *mut Struct_X3DAUDIO_EMITTER;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_X3DAUDIO_DSP_SETTINGS {
    pub pMatrixCoefficients: *mut FLOAT32,
    pub pDelayTimes: *mut FLOAT32,
    pub SrcChannelCount: UINT32,
    pub DstChannelCount: UINT32,
    pub LPFDirectCoefficient: FLOAT32,
    pub LPFReverbCoefficient: FLOAT32,
    pub ReverbLevel: FLOAT32,
    pub DopplerFactor: FLOAT32,
    pub EmitterToListenerAngle: FLOAT32,
    pub EmitterToListenerDistance: FLOAT32,
    pub EmitterVelocityComponent: FLOAT32,
    pub ListenerVelocityComponent: FLOAT32,
}
impl ::std::default::Default for Struct_X3DAUDIO_DSP_SETTINGS {
    fn default() -> Struct_X3DAUDIO_DSP_SETTINGS {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type X3DAUDIO_DSP_SETTINGS = Struct_X3DAUDIO_DSP_SETTINGS;
pub type LPX3DAUDIO_DSP_SETTINGS = *mut Struct_X3DAUDIO_DSP_SETTINGS;
extern "C" {
    pub fn X3DAudioInitialize(SpeakerChannelMask: UINT32,
                              SpeedOfSound: FLOAT32,
                              Instance: X3DAUDIO_HANDLE) -> ();
    pub fn X3DAudioCalculate(Instance: X3DAUDIO_HANDLE,
                             pListener: *const X3DAUDIO_LISTENER,
                             pEmitter: *const X3DAUDIO_EMITTER, Flags: UINT32,
                             pDSPSettings: *mut X3DAUDIO_DSP_SETTINGS) -> ();
}
